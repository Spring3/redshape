// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login view should match the snapshot 1`] = `
.c6 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #A0A0A0;
  color: #FF7079;
  background: white;
}

.c6:hover {
  border: 1px solid #FF7079;
}

.c6:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c6::-webkit-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::-moz-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6:-ms-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c9 {
  border: 0;
  -webkit-clip: rect(0 0 0 0);
  clip: rect(0 0 0 0);
  -webkit-clippath: inset(50%);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c10 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: #F9F9F9 transition:background .2s;
  border: 2px solid transparent;
  border-radius: 3px;
  cursor: pointer;
  background: white;
  border-color: #FF7079;
}

.c10 svg {
  visibility: hidden;
  position: relative;
  vertical-align: middle;
  bottom: 3px;
}

.c8:not(:disabled):hover + .c10,
.c8:focus + .c10 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c10 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c7 {
  display: inline-block;
  vertical-align: middle;
}

.c7 + span {
  margin-left: 10px;
  vertical-align: middle;
}

.c4 h4 {
  margin-bottom: 10px;
  color: #A0A0A0;
}

.c5 {
  color: #A0A0A0;
}

.c12 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  background: #FFFFFF;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: 100%;
  border: 2px solid #FF7079;
  color: #FF7079;
  cursor: pointer;
}

.c12:hover,
.c12:focus {
  background: #FF7079;
  color: #FFFFFF !important;
}

.c12:hover svg,
.c12:focus svg {
  fill: #FFFFFF;
}

.c12:active {
  background: #EF6069;
}

.c15 {
  color: #FF7079;
  font-size: 14px;
  padding: 2px;
  cursor: pointer;
}

.c15:hover {
  background: #FF7079;
  color: #FFFFFF;
}

.c14 {
  color: #FF7079;
}

.c1 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 23px;
  z-index: 3;
  -webkit-app-region: drag;
}

.c0 {
  display: grid;
  grid-template-rows: repeat(4,25vh);
  grid-template-columns: repeat(6,minmax(100px,1fr));
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  justify-items: center;
}

.c2 {
  padding: 40px;
  grid-column: 2 / 6;
  grid-row: 2 / 4;
  min-width: 300px;
  min-height: 500px;
}

.c3 {
  text-align: center;
  font-size: 40px;
  color: #FF7079;
}

.c13 {
  grid-row: 4;
  grid-column: 2 / 6;
  -webkit-align-self: end;
  -ms-flex-item-align: end;
  align-self: end;
  margin-bottom: 20px;
}

.c11 {
  padding: 10px 5px;
  margin: 25px auto 0px auto;
}

<div
  className="c0"
>
  <div
    className="c1"
  />
  <form
    className="c2"
    onSubmit={[Function]}
  >
    <h1
      className="c3"
    >
      Redshape
    </h1>
    <div
      className="form-group undefined c4"
    >
      <h4
        className="c5"
        htmlFor="redmineEndpoint"
      >
        Redmine Endpoint
      </h4>
      <input
        className="c6"
        disabled={false}
        name="redmineEndpoint"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="https://redmine.example.com"
        type="text"
        value=""
      />
    </div>
    <div
      className="form-group undefined c4"
    >
      <h4
        className="c5"
        htmlFor="loginMode"
      >
        Login mode
      </h4>
      <label>
        <div
          className="c7"
        >
          <input
            checked={false}
            className="c8 c9"
            disabled={false}
            name="loginMode"
            onChange={[Function]}
            type="checkbox"
          />
          <div
            checked={false}
            className="c10"
          >
            <svg
              className="mdi-icon "
              fill="white"
              height="18"
              viewBox="0 0 24 24"
              width="18"
            >
              <path
                d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
              />
            </svg>
          </div>
        </div>
        <span>
          Use API Key
        </span>
      </label>
    </div>
    <div
      className="form-group undefined c4"
    >
      <h4
        className="c5"
        htmlFor="username"
      >
        Login
      </h4>
      <input
        className="c6"
        disabled={false}
        name="username"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="form-group undefined c4"
    >
      <h4
        className="c5"
        htmlFor="password"
      >
        Password
      </h4>
      <input
        className="c6"
        disabled={false}
        name="password"
        onBlur={[Function]}
        onChange={[Function]}
        type="password"
        value=""
      />
    </div>
    <button
      className="c11 c12"
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </form>
  <div
    className="c13"
  >
    <p
      className="c14"
    >
      Created byÂ 
      <a
        className="c15"
        href="https://www.dvasylenko.com"
        onClick={[Function]}
        rel="noopener noreferer"
        type="external"
      >
        Daniyil Vasylenko
      </a>
    </p>
  </div>
</div>
`;

exports[`Login view should match the snapshot when using api key 1`] = `
.c6 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #A0A0A0;
  color: #FF7079;
  background: white;
}

.c6:hover {
  border: 1px solid #FF7079;
}

.c6:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c6::-webkit-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::-moz-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6:-ms-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c9 {
  border: 0;
  -webkit-clip: rect(0 0 0 0);
  clip: rect(0 0 0 0);
  -webkit-clippath: inset(50%);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8:not(:disabled):hover + .c16,
.c8:focus + .c16 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c16 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c10 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: #FF7079 transition:background .2s;
  border: 2px solid transparent;
  border-radius: 3px;
  cursor: pointer;
  background: #FF7079;
  border-color: #FF7079;
}

.c10 svg {
  visibility: visible;
  position: relative;
  vertical-align: middle;
  bottom: 3px;
}

.c8:not(:disabled):hover + .c10,
.c8:focus + .c10 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c10 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c7 {
  display: inline-block;
  vertical-align: middle;
}

.c7 + span {
  margin-left: 10px;
  vertical-align: middle;
}

.c4 h4 {
  margin-bottom: 10px;
  color: #A0A0A0;
}

.c5 {
  color: #A0A0A0;
}

.c12 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  background: #FFFFFF;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: 100%;
  border: 2px solid #FF7079;
  color: #FF7079;
  cursor: pointer;
}

.c12:hover,
.c12:focus {
  background: #FF7079;
  color: #FFFFFF !important;
}

.c12:hover svg,
.c12:focus svg {
  fill: #FFFFFF;
}

.c12:active {
  background: #EF6069;
}

.c15 {
  color: #FF7079;
  font-size: 14px;
  padding: 2px;
  cursor: pointer;
}

.c15:hover {
  background: #FF7079;
  color: #FFFFFF;
}

.c14 {
  color: #FF7079;
}

.c1 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 23px;
  z-index: 3;
  -webkit-app-region: drag;
}

.c0 {
  display: grid;
  grid-template-rows: repeat(4,25vh);
  grid-template-columns: repeat(6,minmax(100px,1fr));
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  justify-items: center;
}

.c2 {
  padding: 40px;
  grid-column: 2 / 6;
  grid-row: 2 / 4;
  min-width: 300px;
  min-height: 500px;
}

.c3 {
  text-align: center;
  font-size: 40px;
  color: #FF7079;
}

.c13 {
  grid-row: 4;
  grid-column: 2 / 6;
  -webkit-align-self: end;
  -ms-flex-item-align: end;
  align-self: end;
  margin-bottom: 20px;
}

.c11 {
  padding: 10px 5px;
  margin: 25px auto 0px auto;
}

<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <HashRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "bg": "#FFFFFF",
            "bgDark": "#F9F9F9",
            "bgDarker": "#E9E9E9",
            "bgDisabled": "hsl(0,0%,95%)",
            "green": "#6CCA51",
            "hoverText": "#FFFFFF",
            "main": "#FF7079",
            "mainDark": "#EF6069",
            "mainLight": "#FF7F87",
            "minorText": "#A0A0A0",
            "normalText": "#3F3844",
            "red": "#FF634D",
            "shadow": "#D0D0D0",
            "transitionTime": ".2s",
            "yellow": "#FFDA77",
            "yellow-green": "#C6D369",
            "yellow-red": "#FF875A",
          }
        }
      >
        <WithTheme(Connect(withRouter(LoginView)))>
          <Connect(withRouter(LoginView))
            theme={
              Object {
                "bg": "#FFFFFF",
                "bgDark": "#F9F9F9",
                "bgDarker": "#E9E9E9",
                "bgDisabled": "hsl(0,0%,95%)",
                "green": "#6CCA51",
                "hoverText": "#FFFFFF",
                "main": "#FF7079",
                "mainDark": "#EF6069",
                "mainLight": "#FF7F87",
                "minorText": "#A0A0A0",
                "normalText": "#3F3844",
                "red": "#FF634D",
                "shadow": "#D0D0D0",
                "transitionTime": ".2s",
                "yellow": "#FFDA77",
                "yellow-green": "#C6D369",
                "yellow-red": "#FF875A",
              }
            }
          >
            <withRouter(LoginView)
              checkLogin={[Function]}
              theme={
                Object {
                  "bg": "#FFFFFF",
                  "bgDark": "#F9F9F9",
                  "bgDarker": "#E9E9E9",
                  "bgDisabled": "hsl(0,0%,95%)",
                  "green": "#6CCA51",
                  "hoverText": "#FFFFFF",
                  "main": "#FF7079",
                  "mainDark": "#EF6069",
                  "mainLight": "#FF7F87",
                  "minorText": "#A0A0A0",
                  "normalText": "#3F3844",
                  "red": "#FF634D",
                  "shadow": "#D0D0D0",
                  "transitionTime": ".2s",
                  "yellow": "#FFDA77",
                  "yellow-green": "#C6D369",
                  "yellow-red": "#FF875A",
                }
              }
            >
              <Route>
                <LoginView
                  checkLogin={[Function]}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  theme={
                    Object {
                      "bg": "#FFFFFF",
                      "bgDark": "#F9F9F9",
                      "bgDarker": "#E9E9E9",
                      "bgDisabled": "hsl(0,0%,95%)",
                      "green": "#6CCA51",
                      "hoverText": "#FFFFFF",
                      "main": "#FF7079",
                      "mainDark": "#EF6069",
                      "mainLight": "#FF7F87",
                      "minorText": "#A0A0A0",
                      "normalText": "#3F3844",
                      "red": "#FF634D",
                      "shadow": "#D0D0D0",
                      "transitionTime": ".2s",
                      "yellow": "#FFDA77",
                      "yellow-green": "#C6D369",
                      "yellow-red": "#FF875A",
                    }
                  }
                >
                  <LoginView__Container>
                    <div
                      className="c0"
                    >
                      <_default>
                        <DragArea>
                          <div
                            className="c1"
                          />
                        </DragArea>
                      </_default>
                      <Formik
                        initialValues={
                          Object {
                            "apiKey": "",
                            "password": "",
                            "redmineEndpoint": "",
                            "username": "",
                          }
                        }
                        onSubmit={[Function]}
                        validate={[Function]}
                      >
                        <LoginView__LoginForm
                          onSubmit={[Function]}
                        >
                          <form
                            className="c2"
                            onSubmit={[Function]}
                          >
                            <LoginView__Headline>
                              <h1
                                className="c3"
                              >
                                Redshape
                              </h1>
                            </LoginView__Headline>
                            <Label
                              htmlFor="redmineEndpoint"
                              inline={false}
                              label="Redmine Endpoint"
                              rightToLeft={false}
                            >
                              <Input__FormGroup
                                className="form-group undefined"
                              >
                                <div
                                  className="c4 form-group undefined"
                                >
                                  <Input__H4Label
                                    htmlFor="redmineEndpoint"
                                  >
                                    <h4
                                      className="c5"
                                      htmlFor="redmineEndpoint"
                                    >
                                      Redmine Endpoint
                                    </h4>
                                  </Input__H4Label>
                                  <Input
                                    checked={false}
                                    disabled={false}
                                    name="redmineEndpoint"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder="https://redmine.example.com"
                                    type="text"
                                    value=""
                                  >
                                    <Input__StyledInput
                                      disabled={false}
                                      name="redmineEndpoint"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="https://redmine.example.com"
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="c6"
                                        disabled={false}
                                        name="redmineEndpoint"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        placeholder="https://redmine.example.com"
                                        type="text"
                                        value=""
                                      />
                                    </Input__StyledInput>
                                  </Input>
                                </div>
                              </Input__FormGroup>
                            </Label>
                            <ErrorMessage
                              show={false}
                            />
                            <Label
                              htmlFor="loginMode"
                              inline={false}
                              label="Login mode"
                              rightToLeft={false}
                            >
                              <Input__FormGroup
                                className="form-group undefined"
                              >
                                <div
                                  className="c4 form-group undefined"
                                >
                                  <Input__H4Label
                                    htmlFor="loginMode"
                                  >
                                    <h4
                                      className="c5"
                                      htmlFor="loginMode"
                                    >
                                      Login mode
                                    </h4>
                                  </Input__H4Label>
                                  <label>
                                    <Input
                                      checked={true}
                                      disabled={false}
                                      name="loginMode"
                                      onChange={[Function]}
                                      type="checkbox"
                                    >
                                      <Input__CheckboxContainer>
                                        <div
                                          className="c7"
                                        >
                                          <Input__HiddenCheckbox
                                            checked={true}
                                            disabled={false}
                                            name="loginMode"
                                            onChange={[Function]}
                                          >
                                            <input
                                              checked={true}
                                              className="c8 c9"
                                              disabled={false}
                                              name="loginMode"
                                              onChange={[Function]}
                                              type="checkbox"
                                            />
                                          </Input__HiddenCheckbox>
                                          <Input__StyledCheckbox
                                            checked={true}
                                          >
                                            <div
                                              checked={true}
                                              className="c10"
                                            >
                                              <Memo(CheckIcon)
                                                color="white"
                                                size="18"
                                              >
                                                <svg
                                                  className="mdi-icon "
                                                  fill="white"
                                                  height="18"
                                                  viewBox="0 0 24 24"
                                                  width="18"
                                                >
                                                  <path
                                                    d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
                                                  />
                                                </svg>
                                              </Memo(CheckIcon)>
                                            </div>
                                          </Input__StyledCheckbox>
                                        </div>
                                      </Input__CheckboxContainer>
                                    </Input>
                                    <span>
                                      Use API Key
                                    </span>
                                  </label>
                                </div>
                              </Input__FormGroup>
                            </Label>
                            <Label
                              htmlFor="apiKey"
                              inline={false}
                              label="API Key"
                              rightToLeft={false}
                            >
                              <Input__FormGroup
                                className="form-group undefined"
                              >
                                <div
                                  className="c4 form-group undefined"
                                >
                                  <Input__H4Label
                                    htmlFor="apiKey"
                                  >
                                    <h4
                                      className="c5"
                                      htmlFor="apiKey"
                                    >
                                      API Key
                                    </h4>
                                  </Input__H4Label>
                                  <Input
                                    checked={false}
                                    disabled={false}
                                    name="apiKey"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <Input__StyledInput
                                      disabled={false}
                                      name="apiKey"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="c6"
                                        disabled={false}
                                        name="apiKey"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </Input__StyledInput>
                                  </Input>
                                </div>
                              </Input__FormGroup>
                            </Label>
                            <ErrorMessage
                              show={false}
                            />
                            <LoginView__SubmitButton
                              block={true}
                              disabled={false}
                              type="submit"
                            >
                              <WithTheme(Button)
                                block={true}
                                className="c11"
                                disabled={false}
                                type="submit"
                              >
                                <Button
                                  block={true}
                                  className="c11"
                                  disabled={false}
                                  theme={
                                    Object {
                                      "bg": "#FFFFFF",
                                      "bgDark": "#F9F9F9",
                                      "bgDarker": "#E9E9E9",
                                      "bgDisabled": "hsl(0,0%,95%)",
                                      "green": "#6CCA51",
                                      "hoverText": "#FFFFFF",
                                      "main": "#FF7079",
                                      "mainDark": "#EF6069",
                                      "mainLight": "#FF7F87",
                                      "minorText": "#A0A0A0",
                                      "normalText": "#3F3844",
                                      "red": "#FF634D",
                                      "shadow": "#D0D0D0",
                                      "transitionTime": ".2s",
                                      "yellow": "#FFDA77",
                                      "yellow-green": "#C6D369",
                                      "yellow-red": "#FF875A",
                                    }
                                  }
                                  type="submit"
                                >
                                  <Button__StyledButton
                                    block={true}
                                    className="c11"
                                    disabled={false}
                                    palette={
                                      Object {
                                        "dark": "#EF6069",
                                        "light": "#FF7079",
                                      }
                                    }
                                    theme={
                                      Object {
                                        "bg": "#FFFFFF",
                                        "bgDark": "#F9F9F9",
                                        "bgDarker": "#E9E9E9",
                                        "bgDisabled": "hsl(0,0%,95%)",
                                        "green": "#6CCA51",
                                        "hoverText": "#FFFFFF",
                                        "main": "#FF7079",
                                        "mainDark": "#EF6069",
                                        "mainLight": "#FF7F87",
                                        "minorText": "#A0A0A0",
                                        "normalText": "#3F3844",
                                        "red": "#FF634D",
                                        "shadow": "#D0D0D0",
                                        "transitionTime": ".2s",
                                        "yellow": "#FFDA77",
                                        "yellow-green": "#C6D369",
                                        "yellow-red": "#FF875A",
                                      }
                                    }
                                    type="submit"
                                  >
                                    <button
                                      className="c12 c11"
                                      disabled={false}
                                      type="submit"
                                    >
                                      Submit
                                    </button>
                                  </Button__StyledButton>
                                </Button>
                              </WithTheme(Button)>
                            </LoginView__SubmitButton>
                            <ErrorMessage
                              show={false}
                            />
                          </form>
                        </LoginView__LoginForm>
                      </Formik>
                      <LoginView__CopyrightsContainer>
                        <div
                          className="c13"
                        >
                          <_default>
                            <Copyrights>
                              <p
                                className="c14"
                              >
                                Created byÂ 
                                <Link
                                  href="https://www.dvasylenko.com"
                                  type="external"
                                >
                                  <Link__StyledLink
                                    href="https://www.dvasylenko.com"
                                    onClick={[Function]}
                                    rel="noopener noreferer"
                                    type="external"
                                  >
                                    <a
                                      className="c15"
                                      href="https://www.dvasylenko.com"
                                      onClick={[Function]}
                                      rel="noopener noreferer"
                                      type="external"
                                    >
                                      Daniyil Vasylenko
                                    </a>
                                  </Link__StyledLink>
                                </Link>
                              </p>
                            </Copyrights>
                          </_default>
                        </div>
                      </LoginView__CopyrightsContainer>
                    </div>
                  </LoginView__Container>
                </LoginView>
              </Route>
            </withRouter(LoginView)>
          </Connect(withRouter(LoginView))>
        </WithTheme(Connect(withRouter(LoginView)))>
      </ThemeProvider>
    </Router>
  </HashRouter>
</Provider>
`;
