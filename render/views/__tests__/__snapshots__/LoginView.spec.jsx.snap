// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login view should match the snapshot 1`] = `
.c6 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #A0A0A0;
  color: #FF7079;
  background: white;
}

.c6:hover {
  border: 1px solid #FF7079;
}

.c6:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c6::-webkit-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::-moz-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6:-ms-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c9 {
  border: 0;
  -webkit-clip: rect(0 0 0 0);
  clip: rect(0 0 0 0);
  -webkit-clippath: inset(50%);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c10 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: #F9F9F9 transition:background .2s;
  border: 2px solid transparent;
  border-radius: 3px;
  cursor: pointer;
  background: white;
  border-color: #FF7079;
}

.c10 svg {
  visibility: hidden;
  position: relative;
  vertical-align: middle;
  bottom: 3px;
}

.c8:not(:disabled):hover + .c10,
.c8:focus + .c10 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c10 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c7 {
  display: inline-block;
  vertical-align: middle;
}

.c7 + span {
  margin-left: 10px;
  vertical-align: middle;
}

.c4 h4 {
  margin-bottom: 10px;
  color: #A0A0A0;
}

.c5 {
  color: #A0A0A0;
}

.c12 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  background: #FFFFFF;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: 100%;
  border: 2px solid #FF7079;
  color: #FF7079;
  cursor: pointer;
}

.c12:hover,
.c12:focus {
  background: #FF7079;
  color: #FFFFFF !important;
}

.c12:hover svg,
.c12:focus svg {
  fill: #FFFFFF;
}

.c12:active {
  background: #EF6069;
}

.c15 {
  color: #FF7079;
  font-size: 14px;
  padding: 2px;
  cursor: pointer;
}

.c15:hover {
  background: #FF7079;
  color: #FFFFFF;
}

.c14 {
  color: #FF7079;
}

.c1 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 23px;
  z-index: 3;
  -webkit-app-region: drag;
}

.c0 {
  display: grid;
  grid-template-rows: repeat(4,25vh);
  grid-template-columns: repeat(6,minmax(100px,1fr));
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  justify-items: center;
}

.c2 {
  padding: 40px;
  grid-column: 2 / 6;
  grid-row: 2 / 4;
  min-width: 300px;
  min-height: 500px;
}

.c3 {
  text-align: center;
  font-size: 40px;
  color: #FF7079;
}

.c13 {
  grid-row: 4;
  grid-column: 2 / 6;
  -webkit-align-self: end;
  -ms-flex-item-align: end;
  align-self: end;
  margin-bottom: 20px;
}

.c11 {
  padding: 10px 5px;
  margin: 25px auto 0px auto;
}

<div
  className="c0"
>
  <div
    className="c1"
  />
  <form
    className="c2"
    onSubmit={[Function]}
  >
    <h1
      className="c3"
    >
      Redshape
    </h1>
    <div
      className="form-group  c4"
    >
      <h4
        className="c5"
        htmlFor="redmineEndpoint"
      >
        Redmine Endpoint
      </h4>
      <input
        className="c6"
        disabled={false}
        name="redmineEndpoint"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="https://redmine.example.com"
        type="text"
        value=""
      />
    </div>
    <div
      className="form-group  c4"
    >
      <h4
        className="c5"
        htmlFor="loginMode"
      >
        Login mode
      </h4>
      <label>
        <div
          className="c7"
        >
          <input
            checked={false}
            className="c8 c9"
            disabled={false}
            name="loginMode"
            onChange={[Function]}
            type="checkbox"
          />
          <div
            checked={false}
            className="c10"
          >
            <svg
              className="mdi-icon "
              fill="white"
              height="18"
              viewBox="0 0 24 24"
              width="18"
            >
              <path
                d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
              />
            </svg>
          </div>
        </div>
        <span>
          Use API Key
        </span>
      </label>
    </div>
    <div
      className="form-group  c4"
    >
      <h4
        className="c5"
        htmlFor="username"
      >
        Login
      </h4>
      <input
        className="c6"
        disabled={false}
        name="username"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="form-group  c4"
    >
      <h4
        className="c5"
        htmlFor="password"
      >
        Password
      </h4>
      <input
        className="c6"
        disabled={false}
        name="password"
        onBlur={[Function]}
        onChange={[Function]}
        type="password"
        value=""
      />
    </div>
    <button
      className="c11 c12"
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </form>
  <div
    className="c13"
  >
    <p
      className="c14"
    >
      Created byÂ 
      <a
        className="c15"
        href="https://spring3.github.io/website/"
        onClick={[Function]}
        rel="noopener noreferer"
        type="external"
      >
        Daniyil Vasylenko
      </a>
    </p>
  </div>
</div>
`;

exports[`Login view should match the snapshot when using api key 1`] = `
.c6 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #A0A0A0;
  color: #FF7079;
  background: white;
}

.c6:hover {
  border: 1px solid #FF7079;
}

.c6:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c6::-webkit-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::-moz-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6:-ms-input-placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c6::placeholder {
  color: #A0A0A0;
  font-weight: 500;
}

.c9 {
  border: 0;
  -webkit-clip: rect(0 0 0 0);
  clip: rect(0 0 0 0);
  -webkit-clippath: inset(50%);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8:not(:disabled):hover + .c16,
.c8:focus + .c16 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c16 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c10 {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: #FF7079 transition:background .2s;
  border: 2px solid transparent;
  border-radius: 3px;
  cursor: pointer;
  background: #FF7079;
  border-color: #FF7079;
}

.c10 svg {
  visibility: visible;
  position: relative;
  vertical-align: middle;
  bottom: 3px;
}

.c8:not(:disabled):hover + .c10,
.c8:focus + .c10 {
  box-shadow: 0px 0px 5px 1px #FF7F87;
}

.c8:disabled + .c10 {
  background: #F9F9F9;
  border-color: lightgrey;
}

.c7 {
  display: inline-block;
  vertical-align: middle;
}

.c7 + span {
  margin-left: 10px;
  vertical-align: middle;
}

.c4 h4 {
  margin-bottom: 10px;
  color: #A0A0A0;
}

.c5 {
  color: #A0A0A0;
}

.c12 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  background: #FFFFFF;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: 100%;
  border: 2px solid #FF7079;
  color: #FF7079;
  cursor: pointer;
}

.c12:hover,
.c12:focus {
  background: #FF7079;
  color: #FFFFFF !important;
}

.c12:hover svg,
.c12:focus svg {
  fill: #FFFFFF;
}

.c12:active {
  background: #EF6069;
}

.c15 {
  color: #FF7079;
  font-size: 14px;
  padding: 2px;
  cursor: pointer;
}

.c15:hover {
  background: #FF7079;
  color: #FFFFFF;
}

.c14 {
  color: #FF7079;
}

.c1 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 23px;
  z-index: 3;
  -webkit-app-region: drag;
}

.c0 {
  display: grid;
  grid-template-rows: repeat(4,25vh);
  grid-template-columns: repeat(6,minmax(100px,1fr));
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  justify-items: center;
}

.c2 {
  padding: 40px;
  grid-column: 2 / 6;
  grid-row: 2 / 4;
  min-width: 300px;
  min-height: 500px;
}

.c3 {
  text-align: center;
  font-size: 40px;
  color: #FF7079;
}

.c13 {
  grid-row: 4;
  grid-column: 2 / 6;
  -webkit-align-self: end;
  -ms-flex-item-align: end;
  align-self: end;
  margin-bottom: 20px;
}

.c11 {
  padding: 10px 5px;
  margin: 25px auto 0px auto;
}

<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <HashRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "bg": "#FFFFFF",
            "bgDark": "#F9F9F9",
            "bgDarker": "#E9E9E9",
            "bgDisabled": "hsl(0,0%,95%)",
            "cyan": "#57C5F7",
            "darkBlue": "#1974FF",
            "darkGreen": "#009030",
            "darkOrange": "#E25A03",
            "darkRed": "#D20F37",
            "darkViolet": "#4C3B83",
            "green": "#6CCA51",
            "hoverText": "#FFFFFF",
            "lightBlue": "#80B2FF",
            "lightGreen": "#81CC9A",
            "lightOrange": "#FEC689",
            "lightRed": "#F2899E",
            "lightViolet": "#B0A5D3",
            "main": "#FF7079",
            "mainDark": "#EF6069",
            "mainLight": "#FF7F87",
            "minorText": "#A0A0A0",
            "normalText": "#3F3844",
            "red": "#FF634D",
            "shadow": "#D0D0D0",
            "transitionTime": ".2s",
            "yellow": "#FFDA77",
            "yellow-green": "#C6D369",
            "yellow-red": "#FF875A",
          }
        }
      >
        <WithTheme(Connect(withRouter(LoginView)))>
          <Connect(withRouter(LoginView))
            theme={
              Object {
                "bg": "#FFFFFF",
                "bgDark": "#F9F9F9",
                "bgDarker": "#E9E9E9",
                "bgDisabled": "hsl(0,0%,95%)",
                "cyan": "#57C5F7",
                "darkBlue": "#1974FF",
                "darkGreen": "#009030",
                "darkOrange": "#E25A03",
                "darkRed": "#D20F37",
                "darkViolet": "#4C3B83",
                "green": "#6CCA51",
                "hoverText": "#FFFFFF",
                "lightBlue": "#80B2FF",
                "lightGreen": "#81CC9A",
                "lightOrange": "#FEC689",
                "lightRed": "#F2899E",
                "lightViolet": "#B0A5D3",
                "main": "#FF7079",
                "mainDark": "#EF6069",
                "mainLight": "#FF7F87",
                "minorText": "#A0A0A0",
                "normalText": "#3F3844",
                "red": "#FF634D",
                "shadow": "#D0D0D0",
                "transitionTime": ".2s",
                "yellow": "#FFDA77",
                "yellow-green": "#C6D369",
                "yellow-red": "#FF875A",
              }
            }
          >
            <withRouter(LoginView)
              checkLogin={[Function]}
              theme={
                Object {
                  "bg": "#FFFFFF",
                  "bgDark": "#F9F9F9",
                  "bgDarker": "#E9E9E9",
                  "bgDisabled": "hsl(0,0%,95%)",
                  "cyan": "#57C5F7",
                  "darkBlue": "#1974FF",
                  "darkGreen": "#009030",
                  "darkOrange": "#E25A03",
                  "darkRed": "#D20F37",
                  "darkViolet": "#4C3B83",
                  "green": "#6CCA51",
                  "hoverText": "#FFFFFF",
                  "lightBlue": "#80B2FF",
                  "lightGreen": "#81CC9A",
                  "lightOrange": "#FEC689",
                  "lightRed": "#F2899E",
                  "lightViolet": "#B0A5D3",
                  "main": "#FF7079",
                  "mainDark": "#EF6069",
                  "mainLight": "#FF7F87",
                  "minorText": "#A0A0A0",
                  "normalText": "#3F3844",
                  "red": "#FF634D",
                  "shadow": "#D0D0D0",
                  "transitionTime": ".2s",
                  "yellow": "#FFDA77",
                  "yellow-green": "#C6D369",
                  "yellow-red": "#FF875A",
                }
              }
            >
              <Route>
                <LoginView
                  checkLogin={[Function]}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  theme={
                    Object {
                      "bg": "#FFFFFF",
                      "bgDark": "#F9F9F9",
                      "bgDarker": "#E9E9E9",
                      "bgDisabled": "hsl(0,0%,95%)",
                      "cyan": "#57C5F7",
                      "darkBlue": "#1974FF",
                      "darkGreen": "#009030",
                      "darkOrange": "#E25A03",
                      "darkRed": "#D20F37",
                      "darkViolet": "#4C3B83",
                      "green": "#6CCA51",
                      "hoverText": "#FFFFFF",
                      "lightBlue": "#80B2FF",
                      "lightGreen": "#81CC9A",
                      "lightOrange": "#FEC689",
                      "lightRed": "#F2899E",
                      "lightViolet": "#B0A5D3",
                      "main": "#FF7079",
                      "mainDark": "#EF6069",
                      "mainLight": "#FF7F87",
                      "minorText": "#A0A0A0",
                      "normalText": "#3F3844",
                      "red": "#FF634D",
                      "shadow": "#D0D0D0",
                      "transitionTime": ".2s",
                      "yellow": "#FFDA77",
                      "yellow-green": "#C6D369",
                      "yellow-red": "#FF875A",
                    }
                  }
                >
                  <LoginView__Container>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "LoginView__Container-sc-1j2cp54-0",
                            "isStatic": true,
                            "lastClassName": "c0",
                            "rules": Array [
                              "display:grid;grid-template-rows:repeat(4,25vh);grid-template-columns:repeat(6,minmax(100px,1fr));align-items:center;justify-items:center;",
                            ],
                          },
                          "displayName": "LoginView__Container",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "LoginView__Container-sc-1j2cp54-0",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="c0"
                      >
                        <_default>
                          <DragArea>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "DragArea-sc-12e7y4a-0",
                                    "isStatic": true,
                                    "lastClassName": "c1",
                                    "rules": Array [
                                      "position:fixed;top:0;left:0;right:0;height:23px;z-index:3;-webkit-app-region:drag",
                                    ],
                                  },
                                  "displayName": "DragArea",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "DragArea-sc-12e7y4a-0",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c1"
                              />
                            </StyledComponent>
                          </DragArea>
                        </_default>
                        <Formik
                          enableReinitialize={false}
                          initialValues={
                            Object {
                              "apiKey": "",
                              "password": "",
                              "redmineEndpoint": "",
                              "username": "",
                            }
                          }
                          isInitialValid={false}
                          onSubmit={[Function]}
                          validate={[Function]}
                          validateOnBlur={true}
                          validateOnChange={true}
                        >
                          <LoginView__LoginForm
                            onSubmit={[Function]}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "LoginView__LoginForm-sc-1j2cp54-1",
                                    "isStatic": true,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      "padding:40px;grid-column:2 / 6;grid-row:2 / 4;min-width:300px;min-height:500px;",
                                    ],
                                  },
                                  "displayName": "LoginView__LoginForm",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "LoginView__LoginForm-sc-1j2cp54-1",
                                  "target": "form",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onSubmit={[Function]}
                            >
                              <form
                                className="c2"
                                onSubmit={[Function]}
                              >
                                <LoginView__Headline>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "LoginView__Headline-sc-1j2cp54-2",
                                          "isStatic": false,
                                          "lastClassName": "c3",
                                          "rules": Array [
                                            "text-align:center;font-size:40px;color:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "LoginView__Headline",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "LoginView__Headline-sc-1j2cp54-2",
                                        "target": "h1",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <h1
                                      className="c3"
                                    >
                                      Redshape
                                    </h1>
                                  </StyledComponent>
                                </LoginView__Headline>
                                <Label
                                  htmlFor="redmineEndpoint"
                                  inline={false}
                                  label="Redmine Endpoint"
                                  rightToLeft={false}
                                >
                                  <Input__FormGroup
                                    className="form-group "
                                  >
                                    <StyledComponent
                                      className="form-group "
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input__FormGroup-hbl69l-4",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "h4{margin-bottom:10px;color:",
                                              [Function],
                                              ";}",
                                            ],
                                          },
                                          "displayName": "Input__FormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input__FormGroup-hbl69l-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="form-group  c4"
                                      >
                                        <Input__H4Label
                                          htmlFor="redmineEndpoint"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Input__H4Label-hbl69l-5",
                                                  "isStatic": false,
                                                  "lastClassName": "c5",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "Input__H4Label",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Input__H4Label-hbl69l-5",
                                                "target": "h4",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            htmlFor="redmineEndpoint"
                                          >
                                            <h4
                                              className="c5"
                                              htmlFor="redmineEndpoint"
                                            >
                                              Redmine Endpoint
                                            </h4>
                                          </StyledComponent>
                                        </Input__H4Label>
                                        <Input
                                          checked={false}
                                          disabled={false}
                                          name="redmineEndpoint"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          placeholder="https://redmine.example.com"
                                          type="text"
                                          value=""
                                        >
                                          <Input__StyledInput
                                            disabled={false}
                                            name="redmineEndpoint"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            placeholder="https://redmine.example.com"
                                            type="text"
                                            value=""
                                          >
                                            <StyledComponent
                                              disabled={false}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Input__StyledInput-hbl69l-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c6",
                                                    "rules": Array [
                                                      "display:block;width:100%;border-radius:3px;padding:5px 10px;box-sizing:border-box;font-size:14px;min-height:35px;outline:none;font-weight:bold;",
                                                      [Function],
                                                      "}",
                                                      [Function],
                                                      " ",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Input__StyledInput",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Input__StyledInput-hbl69l-0",
                                                  "target": "input",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              name="redmineEndpoint"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              placeholder="https://redmine.example.com"
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="c6"
                                                disabled={false}
                                                name="redmineEndpoint"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                placeholder="https://redmine.example.com"
                                                type="text"
                                                value=""
                                              />
                                            </StyledComponent>
                                          </Input__StyledInput>
                                        </Input>
                                      </div>
                                    </StyledComponent>
                                  </Input__FormGroup>
                                </Label>
                                <ErrorMessage
                                  show={false}
                                />
                                <Label
                                  htmlFor="loginMode"
                                  inline={false}
                                  label="Login mode"
                                  rightToLeft={false}
                                >
                                  <Input__FormGroup
                                    className="form-group "
                                  >
                                    <StyledComponent
                                      className="form-group "
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input__FormGroup-hbl69l-4",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "h4{margin-bottom:10px;color:",
                                              [Function],
                                              ";}",
                                            ],
                                          },
                                          "displayName": "Input__FormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input__FormGroup-hbl69l-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="form-group  c4"
                                      >
                                        <Input__H4Label
                                          htmlFor="loginMode"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Input__H4Label-hbl69l-5",
                                                  "isStatic": false,
                                                  "lastClassName": "c5",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "Input__H4Label",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Input__H4Label-hbl69l-5",
                                                "target": "h4",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            htmlFor="loginMode"
                                          >
                                            <h4
                                              className="c5"
                                              htmlFor="loginMode"
                                            >
                                              Login mode
                                            </h4>
                                          </StyledComponent>
                                        </Input__H4Label>
                                        <label>
                                          <Input
                                            checked={true}
                                            disabled={false}
                                            name="loginMode"
                                            onChange={[Function]}
                                            type="checkbox"
                                          >
                                            <Input__CheckboxContainer>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Input__CheckboxContainer-hbl69l-3",
                                                      "isStatic": true,
                                                      "lastClassName": "c7",
                                                      "rules": Array [
                                                        "display:inline-block;vertical-align:middle;& + span{margin-left:10px;vertical-align:middle;}",
                                                      ],
                                                    },
                                                    "displayName": "Input__CheckboxContainer",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Input__CheckboxContainer-hbl69l-3",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="c7"
                                                >
                                                  <Input__HiddenCheckbox
                                                    checked={true}
                                                    disabled={false}
                                                    name="loginMode"
                                                    onChange={[Function]}
                                                  >
                                                    <StyledComponent
                                                      checked={true}
                                                      disabled={false}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [
                                                            Object {
                                                              "type": "checkbox",
                                                            },
                                                          ],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "c8",
                                                            "isStatic": true,
                                                            "lastClassName": "c9",
                                                            "rules": Array [
                                                              "border:0;clip:rect(0 0 0 0);clippath:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px;",
                                                            ],
                                                          },
                                                          "displayName": "Input__HiddenCheckbox",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "c8",
                                                          "target": "input",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      name="loginMode"
                                                      onChange={[Function]}
                                                    >
                                                      <input
                                                        checked={true}
                                                        className="c8 c9"
                                                        disabled={false}
                                                        name="loginMode"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      />
                                                    </StyledComponent>
                                                  </Input__HiddenCheckbox>
                                                  <Input__StyledCheckbox
                                                    checked={true}
                                                  >
                                                    <StyledComponent
                                                      checked={true}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Input__StyledCheckbox-hbl69l-2",
                                                            "isStatic": false,
                                                            "lastClassName": "c10",
                                                            "rules": Array [
                                                              "display:inline-block;width:16px;height:16px;background:",
                                                              [Function],
                                                              " transition:background ",
                                                              [Function],
                                                              ";border:2px solid transparent;border-radius:3px;cursor:pointer;svg{visibility:",
                                                              [Function],
                                                              ";position:relative;vertical-align:middle;bottom:3px;}",
                                                              ".c8",
                                                              ":not(:disabled):hover + &,",
                                                              ".c8",
                                                              ":focus + &{box-shadow:0px 0px 5px 1px ",
                                                              [Function],
                                                              ";}",
                                                              ".c8",
                                                              ":disabled + &{background:",
                                                              [Function],
                                                              ";border-color:lightgrey;}",
                                                              [Function],
                                                              ";",
                                                            ],
                                                          },
                                                          "displayName": "Input__StyledCheckbox",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Input__StyledCheckbox-hbl69l-2",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        checked={true}
                                                        className="c10"
                                                      >
                                                        <CheckIcon
                                                          color="white"
                                                          size="18"
                                                        >
                                                          <path
                                                            d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
                                                          />
                                                        </CheckIcon>
                                                      </div>
                                                    </StyledComponent>
                                                  </Input__StyledCheckbox>
                                                </div>
                                              </StyledComponent>
                                            </Input__CheckboxContainer>
                                          </Input>
                                          <span>
                                            Use API Key
                                          </span>
                                        </label>
                                      </div>
                                    </StyledComponent>
                                  </Input__FormGroup>
                                </Label>
                                <Label
                                  htmlFor="apiKey"
                                  inline={false}
                                  label="API Key"
                                  rightToLeft={false}
                                >
                                  <Input__FormGroup
                                    className="form-group "
                                  >
                                    <StyledComponent
                                      className="form-group "
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input__FormGroup-hbl69l-4",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              "h4{margin-bottom:10px;color:",
                                              [Function],
                                              ";}",
                                            ],
                                          },
                                          "displayName": "Input__FormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input__FormGroup-hbl69l-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="form-group  c4"
                                      >
                                        <Input__H4Label
                                          htmlFor="apiKey"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Input__H4Label-hbl69l-5",
                                                  "isStatic": false,
                                                  "lastClassName": "c5",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "Input__H4Label",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Input__H4Label-hbl69l-5",
                                                "target": "h4",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            htmlFor="apiKey"
                                          >
                                            <h4
                                              className="c5"
                                              htmlFor="apiKey"
                                            >
                                              API Key
                                            </h4>
                                          </StyledComponent>
                                        </Input__H4Label>
                                        <Input
                                          checked={false}
                                          disabled={false}
                                          name="apiKey"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <Input__StyledInput
                                            disabled={false}
                                            name="apiKey"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <StyledComponent
                                              disabled={false}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Input__StyledInput-hbl69l-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c6",
                                                    "rules": Array [
                                                      "display:block;width:100%;border-radius:3px;padding:5px 10px;box-sizing:border-box;font-size:14px;min-height:35px;outline:none;font-weight:bold;",
                                                      [Function],
                                                      "}",
                                                      [Function],
                                                      " ",
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Input__StyledInput",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Input__StyledInput-hbl69l-0",
                                                  "target": "input",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              name="apiKey"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="c6"
                                                disabled={false}
                                                name="apiKey"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                type="text"
                                                value=""
                                              />
                                            </StyledComponent>
                                          </Input__StyledInput>
                                        </Input>
                                      </div>
                                    </StyledComponent>
                                  </Input__FormGroup>
                                </Label>
                                <ErrorMessage
                                  show={false}
                                />
                                <LoginView__SubmitButton
                                  block={true}
                                  disabled={false}
                                  type="submit"
                                >
                                  <StyledComponent
                                    block={true}
                                    disabled={false}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "$asyncbind": [Function],
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "LoginView__SubmitButton-sc-1j2cp54-4",
                                          "isStatic": true,
                                          "lastClassName": "c11",
                                          "rules": Array [
                                            "padding:10px 5px;margin:25px auto 0px auto;",
                                          ],
                                        },
                                        "displayName": "LoginView__SubmitButton",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "LoginView__SubmitButton-sc-1j2cp54-4",
                                        "target": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "$asyncbind": [Function],
                                          "displayName": "WithTheme(Button)",
                                          "render": [Function],
                                        },
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    type="submit"
                                  >
                                    <WithTheme(Button)
                                      block={true}
                                      className="c11"
                                      disabled={false}
                                      type="submit"
                                    >
                                      <Button
                                        block={true}
                                        className="c11"
                                        disabled={false}
                                        theme={
                                          Object {
                                            "bg": "#FFFFFF",
                                            "bgDark": "#F9F9F9",
                                            "bgDarker": "#E9E9E9",
                                            "bgDisabled": "hsl(0,0%,95%)",
                                            "cyan": "#57C5F7",
                                            "darkBlue": "#1974FF",
                                            "darkGreen": "#009030",
                                            "darkOrange": "#E25A03",
                                            "darkRed": "#D20F37",
                                            "darkViolet": "#4C3B83",
                                            "green": "#6CCA51",
                                            "hoverText": "#FFFFFF",
                                            "lightBlue": "#80B2FF",
                                            "lightGreen": "#81CC9A",
                                            "lightOrange": "#FEC689",
                                            "lightRed": "#F2899E",
                                            "lightViolet": "#B0A5D3",
                                            "main": "#FF7079",
                                            "mainDark": "#EF6069",
                                            "mainLight": "#FF7F87",
                                            "minorText": "#A0A0A0",
                                            "normalText": "#3F3844",
                                            "red": "#FF634D",
                                            "shadow": "#D0D0D0",
                                            "transitionTime": ".2s",
                                            "yellow": "#FFDA77",
                                            "yellow-green": "#C6D369",
                                            "yellow-red": "#FF875A",
                                          }
                                        }
                                        type="submit"
                                      >
                                        <Button__StyledButton
                                          block={true}
                                          className="c11"
                                          disabled={false}
                                          palette={
                                            Object {
                                              "dark": "#EF6069",
                                              "light": "#FF7079",
                                            }
                                          }
                                          theme={
                                            Object {
                                              "bg": "#FFFFFF",
                                              "bgDark": "#F9F9F9",
                                              "bgDarker": "#E9E9E9",
                                              "bgDisabled": "hsl(0,0%,95%)",
                                              "cyan": "#57C5F7",
                                              "darkBlue": "#1974FF",
                                              "darkGreen": "#009030",
                                              "darkOrange": "#E25A03",
                                              "darkRed": "#D20F37",
                                              "darkViolet": "#4C3B83",
                                              "green": "#6CCA51",
                                              "hoverText": "#FFFFFF",
                                              "lightBlue": "#80B2FF",
                                              "lightGreen": "#81CC9A",
                                              "lightOrange": "#FEC689",
                                              "lightRed": "#F2899E",
                                              "lightViolet": "#B0A5D3",
                                              "main": "#FF7079",
                                              "mainDark": "#EF6069",
                                              "mainLight": "#FF7F87",
                                              "minorText": "#A0A0A0",
                                              "normalText": "#3F3844",
                                              "red": "#FF634D",
                                              "shadow": "#D0D0D0",
                                              "transitionTime": ".2s",
                                              "yellow": "#FFDA77",
                                              "yellow-green": "#C6D369",
                                              "yellow-red": "#FF875A",
                                            }
                                          }
                                          type="submit"
                                        >
                                          <StyledComponent
                                            block={true}
                                            className="c11"
                                            disabled={false}
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Button__StyledButton-bgocaa-0",
                                                  "isStatic": false,
                                                  "lastClassName": "c12",
                                                  "rules": Array [
                                                    "border-radius:3px;font-weight:bold;font-size:14px;outline:none;text-align:center;",
                                                    [Function],
                                                    " ",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "Button__StyledButton",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Button__StyledButton-bgocaa-0",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            palette={
                                              Object {
                                                "dark": "#EF6069",
                                                "light": "#FF7079",
                                              }
                                            }
                                            theme={
                                              Object {
                                                "bg": "#FFFFFF",
                                                "bgDark": "#F9F9F9",
                                                "bgDarker": "#E9E9E9",
                                                "bgDisabled": "hsl(0,0%,95%)",
                                                "cyan": "#57C5F7",
                                                "darkBlue": "#1974FF",
                                                "darkGreen": "#009030",
                                                "darkOrange": "#E25A03",
                                                "darkRed": "#D20F37",
                                                "darkViolet": "#4C3B83",
                                                "green": "#6CCA51",
                                                "hoverText": "#FFFFFF",
                                                "lightBlue": "#80B2FF",
                                                "lightGreen": "#81CC9A",
                                                "lightOrange": "#FEC689",
                                                "lightRed": "#F2899E",
                                                "lightViolet": "#B0A5D3",
                                                "main": "#FF7079",
                                                "mainDark": "#EF6069",
                                                "mainLight": "#FF7F87",
                                                "minorText": "#A0A0A0",
                                                "normalText": "#3F3844",
                                                "red": "#FF634D",
                                                "shadow": "#D0D0D0",
                                                "transitionTime": ".2s",
                                                "yellow": "#FFDA77",
                                                "yellow-green": "#C6D369",
                                                "yellow-red": "#FF875A",
                                              }
                                            }
                                            type="submit"
                                          >
                                            <button
                                              className="c11 c12"
                                              disabled={false}
                                              type="submit"
                                            >
                                              Submit
                                            </button>
                                          </StyledComponent>
                                        </Button__StyledButton>
                                      </Button>
                                    </WithTheme(Button)>
                                  </StyledComponent>
                                </LoginView__SubmitButton>
                                <ErrorMessage
                                  show={false}
                                />
                              </form>
                            </StyledComponent>
                          </LoginView__LoginForm>
                        </Formik>
                        <LoginView__CopyrightsContainer>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "LoginView__CopyrightsContainer-sc-1j2cp54-3",
                                  "isStatic": true,
                                  "lastClassName": "c13",
                                  "rules": Array [
                                    "grid-row:4;grid-column:2 / 6;align-self:end;margin-bottom:20px;",
                                  ],
                                },
                                "displayName": "LoginView__CopyrightsContainer",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "LoginView__CopyrightsContainer-sc-1j2cp54-3",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c13"
                            >
                              <_default>
                                <Copyrights>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Copyrights-ktqfjx-0",
                                          "isStatic": true,
                                          "lastClassName": "c14",
                                          "rules": Array [
                                            "color:#FF7079;",
                                          ],
                                        },
                                        "displayName": "Copyrights",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Copyrights-ktqfjx-0",
                                        "target": "p",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <p
                                      className="c14"
                                    >
                                      Created byÂ 
                                      <Link
                                        href="https://spring3.github.io/website/"
                                        type="external"
                                      >
                                        <Link__StyledLink
                                          clickable="https://spring3.github.io/website/"
                                          href="https://spring3.github.io/website/"
                                          onClick={[Function]}
                                          rel="noopener noreferer"
                                          type="external"
                                        >
                                          <StyledComponent
                                            clickable="https://spring3.github.io/website/"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Link__StyledLink-qed6kb-0",
                                                  "isStatic": false,
                                                  "lastClassName": "c15",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";font-size:",
                                                    [Function],
                                                    ";padding:2px;cursor:",
                                                    [Function],
                                                    ";",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "Link__StyledLink",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Link__StyledLink-qed6kb-0",
                                                "target": "a",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            href="https://spring3.github.io/website/"
                                            onClick={[Function]}
                                            rel="noopener noreferer"
                                            type="external"
                                          >
                                            <a
                                              className="c15"
                                              href="https://spring3.github.io/website/"
                                              onClick={[Function]}
                                              rel="noopener noreferer"
                                              type="external"
                                            >
                                              Daniyil Vasylenko
                                            </a>
                                          </StyledComponent>
                                        </Link__StyledLink>
                                      </Link>
                                    </p>
                                  </StyledComponent>
                                </Copyrights>
                              </_default>
                            </div>
                          </StyledComponent>
                        </LoginView__CopyrightsContainer>
                      </div>
                    </StyledComponent>
                  </LoginView__Container>
                </LoginView>
              </Route>
            </withRouter(LoginView)>
          </Connect(withRouter(LoginView))>
        </WithTheme(Connect(withRouter(LoginView)))>
      </ThemeProvider>
    </Router>
  </HashRouter>
</Provider>
`;
