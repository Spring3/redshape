// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Timer component should match the snapshot 1`] = `
.c2 {
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: color ease;
  transition: color ease;
}

.c2:active,
.c2:focus,
.c2:visited {
  background: transparent;
}

.c4 {
  font-size: 14px;
  padding: 2px;
  cursor: pointer;
}

.c4:hover {
  background: undefined;
  color: undefined;
}

.c0 {
  -webkit-animation: dZriqK .7s ease-in;
  animation: dZriqK .7s ease-in;
  max-width: 100%;
  box-sizing: border-box;
  padding: 20px;
  position: fixed;
  bottom: 0;
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  box-shadow: 0px -2px 20px;
  border-top: 2px solid;
}

.c0 div.panel {
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  min-width: 520px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  max-width: 1800px;
}

.c0 div.buttons {
  margin: 0 20px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 div.time {
  margin: 0 20px;
  font-size: 16px;
  font-weight: bold;
}

.c0 div.buttons a {
  padding: 10px 0px;
}

.c0 div.buttons a:first-child {
  margin-right: 20px;
}

.c0 div.buttons.buttons-advanced a {
  margin-right: 5px;
}

.c0 div.buttons.buttons-advanced a:last-child {
  margin-right: initial;
}

.c0 div.issueName {
  padding: 0 20px;
  max-width: 500px;
}

.c0 input[name="comment"] {
  -webkit-box-flex: 2;
  -webkit-flex-grow: 2;
  -ms-flex-positive: 2;
  flex-grow: 2;
  margin-left: 20px;
  width: initial;
  border: none;
  border-radius: 0;
  border-bottom: 1px solid;
  color: #A4A4A4;
}

.c0 input[name="comment"]:focus {
  border: none;
  border-radius: 0;
  border-bottom: 1px solid;
  box-shadow: none;
}

.c1 {
  padding: 0px;
}

.c3 {
  color: inherit;
  padding: 0;
  font-size: 16px;
  font-weight: bold;
  -webkit-text-decoration: none;
  text-decoration: none;
}

<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Timer)
    trackedDuration={4000}
  >
    <Timer
      advancedTimerControls={false}
      continueTimer={[Function]}
      discardIdleTime={true}
      idleBehavior={0}
      initialValue={0}
      isEnabled={true}
      isPaused={true}
      issueTitle=""
      pauseTimer={[Function]}
      saveTimer={[Function]}
      stopTimer={[Function]}
      trackedDuration={4000}
      trackedIssue={
        Object {
          "id": "123abc",
          "subject": "Test issue",
        }
      }
      trackedTime={0}
    >
      <Timer__ActiveTimer
        isEnabled={true}
      >
        <div
          className="c0"
        >
          <div
            className="panel"
          >
            <div
              className="buttons"
            >
              <Timer__StyledButton
                id="stop-timer"
                onClick={[Function]}
              >
                <GhostButton
                  className="c1"
                  disabled={false}
                  id="stop-timer"
                  onClick={[Function]}
                >
                  <Button__StyledLink
                    className="c1"
                    disabled={false}
                    href="#"
                    id="stop-timer"
                    onClick={[Function]}
                  >
                    <a
                      className="c2 c1"
                      disabled={false}
                      href="#"
                      id="stop-timer"
                      onClick={[Function]}
                    >
                      <Memo(StopIcon)
                        size={35}
                      >
                        <svg
                          className="mdi-icon "
                          fill="currentColor"
                          height={35}
                          viewBox="0 0 24 24"
                          width={35}
                        >
                          <path
                            d="M18,18H6V6H18V18Z"
                          />
                        </svg>
                      </Memo(StopIcon)>
                    </a>
                  </Button__StyledLink>
                </GhostButton>
              </Timer__StyledButton>
              <Timer__StyledButton
                id="continue-timer"
                onClick={[Function]}
              >
                <GhostButton
                  className="c1"
                  disabled={false}
                  id="continue-timer"
                  onClick={[Function]}
                >
                  <Button__StyledLink
                    className="c1"
                    disabled={false}
                    href="#"
                    id="continue-timer"
                    onClick={[Function]}
                  >
                    <a
                      className="c2 c1"
                      disabled={false}
                      href="#"
                      id="continue-timer"
                      onClick={[Function]}
                    >
                      <Memo(PlayIcon)
                        size={35}
                      >
                        <svg
                          className="mdi-icon "
                          fill="currentColor"
                          height={35}
                          viewBox="0 0 24 24"
                          width={35}
                        >
                          <path
                            d="M8,5.14V19.14L19,12.14L8,5.14Z"
                          />
                        </svg>
                      </Memo(PlayIcon)>
                    </a>
                  </Button__StyledLink>
                </GhostButton>
              </Timer__StyledButton>
            </div>
            <div
              className="issueName"
            >
              <Timer__MaskedLink
                href="#"
                onClick={[Function]}
              >
                <Link
                  className="c3"
                  href="#"
                  onClick={[Function]}
                  testId="link"
                >
                  <Link__StyledLink
                    className="c3"
                    data-testid="link"
                    href="#"
                    onClick={[Function]}
                    rel="noopener noreferer"
                  >
                    <a
                      className="c4 c3"
                      data-testid="link"
                      href="#"
                      onClick={[Function]}
                      rel="noopener noreferer"
                    >
                      Test issue
                    </a>
                  </Link__StyledLink>
                </Link>
              </Timer__MaskedLink>
            </div>
            <div
              className="time"
            >
              <span>
                00:00:00
              </span>
            </div>
          </div>
        </div>
      </Timer__ActiveTimer>
    </Timer>
  </Connect(Timer)>
</Provider>
`;
