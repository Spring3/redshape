// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TimeEntryModal Component it should match the snapshot 1`] = `
.c3 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #909090;
  color: #FF7079;
  background: white;
}

.c3:hover {
  border: 1px solid #FF7079;
}

.c3:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c3::-webkit-input-placeholder {
  color: #909090;
}

.c3::-moz-placeholder {
  color: #909090;
}

.c3:-ms-input-placeholder {
  color: #909090;
}

.c3::placeholder {
  color: #909090;
}

.c0 h4 {
  margin-bottom: 10px;
  color: #909090;
}

.c1 {
  color: #909090;
}

.c15 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: auto;
  border: 2px solid #6CCA51;
  color: #6CCA51;
  cursor: pointer;
}

.c15:hover,
.c15:focus {
  background: #6CCA51;
  color: #FFFFFF;
}

.c15:hover svg,
.c15:focus svg {
  fill: #FFFFFF;
}

.c11 {
  -webkit-text-decoration: none;
  text-decoration: none;
  color: #FF7079;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
}

.c11:hover {
  color: #EF6069;
}

.c11:hover svg {
  fill: #EF6069;
}

.c11:active,
.c11:focus,
.c11:visited {
  background: transparent;
}

.c13 {
  font-size: 14px;
  resize: none;
  overflow: hidden;
  height: auto;
  width: 100%;
  line-height: 1.5rem;
  box-sizing: border-box;
}

.c10 {
  position: absolute;
  display: none;
  border-radius: 3px;
  top: -50px;
  left: 50%;
  width: auto;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  padding: 5px;
  background: #FFFFFF;
  color: #EF6069;
  text-align: center;
  font-size: 12px;
  white-space: nowrap;
  box-shadow: 0px 2px 7px #909090;
}

.c10::after {
  content: ' ';
  position: absolute;
  top: 100%;
  left: 50%;
  width: auto;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  border: 2px solid black;
  border-width: 5px;
  border-color: #FFFFFF transparent transparent transparent;
}

.c8 {
  display: inline-block;
  position: relative;
}

.c8:hover .c9 {
  display: block;
}

.c7 {
  display: inline;
  margin-right: 10px;
  position: relative;
  cursor: pointer;
}

.c7:hover svg {
  color: #FF7079 !important;
}

.c5 {
  list-style-type: none;
  margin: 0px 0px 10px 0px;
  padding: 5px 0px;
  width: 100%;
}

.c5 li:first-child {
  margin-left: 0;
}

.c5 li:last-child {
  float: right;
  margin-right: 0;
}

.c5 .c6:last-child {
  bottom: 1px;
}

.c5 .c6:last-child a {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c12 {
  padding: 10px;
  border-radius: 3px;
  outline: none;
  border: 1px solid #909090;
}

.c12:hover {
  border-color: #FF7079;
}

.c12:focus {
  border: 2px solid #FF7079;
}

.c4 .DayPicker {
  display: inline-block;
  font-size: 1rem;
}

.c4 .DayPicker-wrapper {
  position: relative;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  padding-bottom: 1em;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c4 .DayPicker-Months {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c4 .DayPicker-Month {
  display: table;
  margin: 0 1em;
  margin-top: 1em;
  border-spacing: 0;
  border-collapse: collapse;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c4 .DayPicker-NavButton {
  position: absolute;
  top: 1em;
  right: 1.5em;
  left: auto;
  display: inline-block;
  margin-top: 2px;
  width: 1.25em;
  height: 1.25em;
  background-position: center;
  background-size: 50%;
  background-repeat: no-repeat;
  cursor: pointer;
}

.c4 .DayPicker-NavButton:hover {
  opacity: 0.8;
}

.c4 .DayPicker-NavButton--prev {
  margin-right: 1.5em;
  left: 1.5em;
  right: unset;
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M14%2C7L9%2C12L14%2C17V7Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E');
  background-size: 1.5rem;
}

.c4 .DayPicker-NavButton--next {
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M10%2C17L15%2C12L10%2C7V17Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E');
  background-size: 1.5rem;
}

.c4 .DayPicker-NavButton--interactionDisabled {
  display: none;
}

.c4 .DayPicker-Caption {
  display: table-caption;
  margin-bottom: 0.5em;
  padding: 0 0.5em;
  text-align: center;
}

.c4 .DayPicker-Caption > div {
  font-weight: 500;
  font-size: 1.15em;
}

.c4 .DayPicker-Weekdays {
  display: table-header-group;
  margin-top: 1em;
}

.c4 .DayPicker-WeekdaysRow {
  display: table-row;
}

.c4 .DayPicker-Weekday {
  display: table-cell;
  padding: 0.5em;
  color: #3F3844;
  font-weight: bold;
  text-align: center;
  font-size: 0.875em;
}

.c4 .DayPicker-Weekday abbr[title] {
  border-bottom: none;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c4 .DayPicker-Body {
  display: table-row-group;
}

.c4 .DayPicker-Week {
  display: table-row;
}

.c4 .DayPicker-Day {
  display: table-cell;
  padding: 0.5em;
  border-radius: 50%;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
}

.c4 .DayPicker--interactionDisabled .DayPicker-Day {
  cursor: default;
}

.c4 .DayPicker-Footer {
  padding-top: 0.5em;
}

.c4 .DayPicker-Day--today {
  color: #FF7079;
  font-weight: 700;
}

.c4 .DayPicker-Day--disabled {
  color: #909090;
  cursor: default;
}

.c4 .DayPicker-Day--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside) {
  position: relative;
  background-color: #3F3844;
  color: #FFFFFF;
  font-weight: bold;
}

.c4 .DayPicker:not(.DayPicker--interactionDisabled) .DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover {
  background-color: #F9F9F9;
  color: #3F3844;
}

.c4 .DayPickerInput {
  display: inline-block;
}

.c4 .DayPickerInput-OverlayWrapper {
  position: relative;
  left: -30%;
  bottom: -5px;
}

.c4 .DayPickerInput-Overlay {
  position: absolute;
  left: 0;
  z-index: 1;
  background: #FFFFFF;
  box-shadow: 0 2px 5px rgba(0,0,0,0.15);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c14 {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 2px solid #F9F9F9;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c14 button {
  padding: 8px 15px;
}

<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "bg": "#FFFFFF",
        "bgDark": "#F9F9F9",
        "green": "#6CCA51",
        "hoverText": "#FFFFFF",
        "main": "#FF7079",
        "mainDark": "#EF6069",
        "mainLight": "#FF7F87",
        "minorText": "#909090",
        "normalText": "#3F3844",
        "red": "#FF634D",
        "transitionTime": ".2s",
        "yellow": "#FFDA77",
      }
    }
  >
    <WithTheme(Connect(TimeEntryModal))
      activities={
        Array [
          Object {
            "id": 1,
            "name": "Development",
          },
          Object {
            "id": 2,
            "name": "Testing",
          },
        ]
      }
      isEditable={true}
      isOpen={true}
      isUserAuthor={true}
      onClose={[MockFunction]}
      timeEntry={
        Object {
          "activity": Object {
            "id": 1,
            "name": "Development",
          },
          "comments": "Hello world",
          "created_on": "2011-01-01",
          "hours": 10,
          "id": 1,
          "issue": Object {
            "id": 1,
            "name": "Cover a modal with tests",
          },
          "project": Object {
            "id": 1,
            "name": "Testing Project",
          },
          "spent_on": "2011-01-01",
          "user": Object {
            "id": 1,
            "name": "John Wayne",
          },
        }
      }
    >
      <Connect(TimeEntryModal)
        activities={
          Array [
            Object {
              "id": 1,
              "name": "Development",
            },
            Object {
              "id": 2,
              "name": "Testing",
            },
          ]
        }
        isEditable={true}
        isOpen={true}
        isUserAuthor={true}
        onClose={[MockFunction]}
        theme={
          Object {
            "bg": "#FFFFFF",
            "bgDark": "#F9F9F9",
            "green": "#6CCA51",
            "hoverText": "#FFFFFF",
            "main": "#FF7079",
            "mainDark": "#EF6069",
            "mainLight": "#FF7F87",
            "minorText": "#909090",
            "normalText": "#3F3844",
            "red": "#FF634D",
            "transitionTime": ".2s",
            "yellow": "#FFDA77",
          }
        }
        timeEntry={
          Object {
            "activity": Object {
              "id": 1,
              "name": "Development",
            },
            "comments": "Hello world",
            "created_on": "2011-01-01",
            "hours": 10,
            "id": 1,
            "issue": Object {
              "id": 1,
              "name": "Cover a modal with tests",
            },
            "project": Object {
              "id": 1,
              "name": "Testing Project",
            },
            "spent_on": "2011-01-01",
            "user": Object {
              "id": 1,
              "name": "John Wayne",
            },
          }
        }
      >
        <TimeEntryModal
          activities={
            Array [
              Object {
                "id": 1,
                "name": "Development",
              },
              Object {
                "id": 2,
                "name": "Testing",
              },
            ]
          }
          isEditable={true}
          isOpen={true}
          isUserAuthor={true}
          onClose={[MockFunction]}
          publishTimeEntry={[Function]}
          theme={
            Object {
              "bg": "#FFFFFF",
              "bgDark": "#F9F9F9",
              "green": "#6CCA51",
              "hoverText": "#FFFFFF",
              "main": "#FF7079",
              "mainDark": "#EF6069",
              "mainLight": "#FF7F87",
              "minorText": "#909090",
              "normalText": "#3F3844",
              "red": "#FF634D",
              "transitionTime": ".2s",
              "yellow": "#FFDA77",
            }
          }
          time={
            Object {
              "error": undefined,
              "isFetching": false,
            }
          }
          timeEntry={
            Object {
              "activity": Object {
                "id": 1,
                "name": "Development",
              },
              "comments": "Hello world",
              "created_on": "2011-01-01",
              "hours": 10,
              "id": 1,
              "issue": Object {
                "id": 1,
                "name": "Cover a modal with tests",
              },
              "project": Object {
                "id": 1,
                "name": "Testing Project",
              },
              "spent_on": "2011-01-01",
              "user": Object {
                "id": 1,
                "name": "John Wayne",
              },
            }
          }
          updateTimeEntry={[Function]}
          validateBeforePublish={[Function]}
          validateBeforeUpdate={[Function]}
        >
          <Modal
            animationDuration={500}
            blockScroll={true}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconId={null}
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            focusTrapOptions={Object {}}
            focusTrapped={false}
            modalId={null}
            onClose={[MockFunction]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={true}
            overlayId={null}
            showCloseIcon={true}
            styles={Object {}}
          >
            <Portal>
              <Portal
                containerInfo={
                  .c3 {
  display: block;
  width: 100%;
  border-radius: 3px;
  padding: 5px 10px;
  box-sizing: border-box;
  font-size: 14px;
  min-height: 35px;
  outline: none;
  font-weight: bold;
  -webkit-transition: background .2s;
  transition: background .2s;
  border: 1px solid #909090;
  color: #FF7079;
  background: white;
}

.c3:hover {
  border: 1px solid #FF7079;
}

.c3:focus {
  border-color: #FF7079;
  box-shadow: 0px 0px 0px 1px #FF7079;
}

.c3::-webkit-input-placeholder {
  color: #909090;
}

.c3::-moz-placeholder {
  color: #909090;
}

.c3:-ms-input-placeholder {
  color: #909090;
}

.c3::placeholder {
  color: #909090;
}

.c0 h4 {
  margin-bottom: 10px;
  color: #909090;
}

.c1 {
  color: #909090;
}

.c15 {
  border-radius: 3px;
  font-weight: bold;
  font-size: 14px;
  outline: none;
  text-align: center;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
  -webkit-transition: background ease .2s;
  transition: background ease .2s;
  width: auto;
  border: 2px solid #6CCA51;
  color: #6CCA51;
  cursor: pointer;
}

.c15:hover,
.c15:focus {
  background: #6CCA51;
  color: #FFFFFF;
}

.c15:hover svg,
.c15:focus svg {
  fill: #FFFFFF;
}

.c11 {
  -webkit-text-decoration: none;
  text-decoration: none;
  color: #FF7079;
  -webkit-transition: color ease .2s;
  transition: color ease .2s;
}

.c11:hover {
  color: #EF6069;
}

.c11:hover svg {
  fill: #EF6069;
}

.c11:active,
.c11:focus,
.c11:visited {
  background: transparent;
}

.c13 {
  font-size: 14px;
  resize: none;
  overflow: hidden;
  height: auto;
  width: 100%;
  line-height: 1.5rem;
  box-sizing: border-box;
}

.c10 {
  position: absolute;
  display: none;
  border-radius: 3px;
  top: -50px;
  left: 50%;
  width: auto;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  padding: 5px;
  background: #FFFFFF;
  color: #EF6069;
  text-align: center;
  font-size: 12px;
  white-space: nowrap;
  box-shadow: 0px 2px 7px #909090;
}

.c10::after {
  content: ' ';
  position: absolute;
  top: 100%;
  left: 50%;
  width: auto;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  border: 2px solid black;
  border-width: 5px;
  border-color: #FFFFFF transparent transparent transparent;
}

.c8 {
  display: inline-block;
  position: relative;
}

.c8:hover .c9 {
  display: block;
}

.c7 {
  display: inline;
  margin-right: 10px;
  position: relative;
  cursor: pointer;
}

.c7:hover svg {
  color: #FF7079 !important;
}

.c5 {
  list-style-type: none;
  margin: 0px 0px 10px 0px;
  padding: 5px 0px;
  width: 100%;
}

.c5 li:first-child {
  margin-left: 0;
}

.c5 li:last-child {
  float: right;
  margin-right: 0;
}

.c5 .c6:last-child {
  bottom: 1px;
}

.c5 .c6:last-child a {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c12 {
  padding: 10px;
  border-radius: 3px;
  outline: none;
  border: 1px solid #909090;
}

.c12:hover {
  border-color: #FF7079;
}

.c12:focus {
  border: 2px solid #FF7079;
}

.c4 .DayPicker {
  display: inline-block;
  font-size: 1rem;
}

.c4 .DayPicker-wrapper {
  position: relative;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  padding-bottom: 1em;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c4 .DayPicker-Months {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c4 .DayPicker-Month {
  display: table;
  margin: 0 1em;
  margin-top: 1em;
  border-spacing: 0;
  border-collapse: collapse;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c4 .DayPicker-NavButton {
  position: absolute;
  top: 1em;
  right: 1.5em;
  left: auto;
  display: inline-block;
  margin-top: 2px;
  width: 1.25em;
  height: 1.25em;
  background-position: center;
  background-size: 50%;
  background-repeat: no-repeat;
  cursor: pointer;
}

.c4 .DayPicker-NavButton:hover {
  opacity: 0.8;
}

.c4 .DayPicker-NavButton--prev {
  margin-right: 1.5em;
  left: 1.5em;
  right: unset;
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M14%2C7L9%2C12L14%2C17V7Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E');
  background-size: 1.5rem;
}

.c4 .DayPicker-NavButton--next {
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M10%2C17L15%2C12L10%2C7V17Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E');
  background-size: 1.5rem;
}

.c4 .DayPicker-NavButton--interactionDisabled {
  display: none;
}

.c4 .DayPicker-Caption {
  display: table-caption;
  margin-bottom: 0.5em;
  padding: 0 0.5em;
  text-align: center;
}

.c4 .DayPicker-Caption > div {
  font-weight: 500;
  font-size: 1.15em;
}

.c4 .DayPicker-Weekdays {
  display: table-header-group;
  margin-top: 1em;
}

.c4 .DayPicker-WeekdaysRow {
  display: table-row;
}

.c4 .DayPicker-Weekday {
  display: table-cell;
  padding: 0.5em;
  color: #3F3844;
  font-weight: bold;
  text-align: center;
  font-size: 0.875em;
}

.c4 .DayPicker-Weekday abbr[title] {
  border-bottom: none;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c4 .DayPicker-Body {
  display: table-row-group;
}

.c4 .DayPicker-Week {
  display: table-row;
}

.c4 .DayPicker-Day {
  display: table-cell;
  padding: 0.5em;
  border-radius: 50%;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
}

.c4 .DayPicker--interactionDisabled .DayPicker-Day {
  cursor: default;
}

.c4 .DayPicker-Footer {
  padding-top: 0.5em;
}

.c4 .DayPicker-Day--today {
  color: #FF7079;
  font-weight: 700;
}

.c4 .DayPicker-Day--disabled {
  color: #909090;
  cursor: default;
}

.c4 .DayPicker-Day--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside) {
  position: relative;
  background-color: #3F3844;
  color: #FFFFFF;
  font-weight: bold;
}

.c4 .DayPicker:not(.DayPicker--interactionDisabled) .DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover {
  background-color: #F9F9F9;
  color: #3F3844;
}

.c4 .DayPickerInput {
  display: inline-block;
}

.c4 .DayPickerInput-OverlayWrapper {
  position: relative;
  left: -30%;
  bottom: -5px;
}

.c4 .DayPickerInput-Overlay {
  position: absolute;
  left: 0;
  z-index: 1;
  background: #FFFFFF;
  box-shadow: 0 2px 5px rgba(0,0,0,0.15);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c14 {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 2px solid #F9F9F9;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c14 button {
  padding: 8px 15px;
}

<div>
                    <div
                      class="styles_overlay__CLSq- styles_overlayCenter__YHoO7 styles_transitionEnter__3j_-a styles_transitionEnterActive___eQs7"
                    >
                      <div
                        class="styles_modal__gNwvD"
                      >
                        <div
                          class="form-group undefined c0"
                        >
                          <h4
                            class="c1"
                            for="author"
                          >
                            Author
                          </h4>
                          <div
                            name="author"
                          >
                            John Wayne
                          </div>
                        </div>
                        <div
                          class="form-group undefined c0"
                        >
                          <h4
                            class="c1"
                            for="issue"
                          >
                            Issue
                          </h4>
                          <div
                            name="issue"
                          >
                            #
                            1
                             
                            Cover a modal with tests
                          </div>
                        </div>
                        <div
                          class="form-group undefined c0"
                        >
                          <h4
                            class="c1"
                            for="activity"
                          >
                            Activity
                          </h4>
                          <div
                            class="css-10nd86i"
                          >
                            <div
                              class="css-1rcfx4g"
                            >
                              <div
                                class="css-1hwfws3"
                              >
                                <div
                                  class="css-xp4uvy"
                                >
                                  Development
                                </div>
                                <div
                                  class="css-1g6gooi"
                                >
                                  <div
                                    class=""
                                    style="display: inline-block;"
                                  >
                                    <input
                                      aria-autocomplete="list"
                                      autocapitalize="none"
                                      autocomplete="off"
                                      autocorrect="off"
                                      id="react-select-2-input"
                                      spellcheck="false"
                                      style="box-sizing: content-box; width: 2px; border: 0px; font-size: inherit; opacity: 1; outline: 0; padding: 0px;"
                                      tabindex="0"
                                      type="text"
                                      value=""
                                    />
                                    <div
                                      style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-size: inherit; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                class="css-1wy0on6"
                              >
                                <span
                                  class="css-d8oujb"
                                />
                                <div
                                  aria-hidden="true"
                                  class="css-1ep9fjw"
                                >
                                  <svg
                                    aria-hidden="true"
                                    class="css-19bqh2r"
                                    focusable="false"
                                    height="20"
                                    viewBox="0 0 20 20"
                                    width="20"
                                  >
                                    <path
                                      d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                    />
                                  </svg>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          class="c2"
                        >
                          <div>
                            <div
                              class="form-group undefined c0"
                            >
                              <h4
                                class="c1"
                                for="hours"
                              >
                                Hours
                              </h4>
                              <input
                                class="c3"
                                name="hours"
                                type="number"
                                value="10"
                              />
                            </div>
                          </div>
                          <div>
                            <div
                              class="form-group undefined c0"
                            >
                              <h4
                                class="c1"
                                for="spent_on"
                              >
                                Date
                              </h4>
                              <div
                                class="c4"
                              >
                                <div
                                  class="DayPickerInput"
                                >
                                  <input
                                    class="c3"
                                    placeholder="YYYY-M-D"
                                    type="text"
                                    value="2011-1-1"
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          class="form-group undefined c0"
                        >
                          <h4
                            class="c1"
                            for="comments"
                          >
                            Comments
                          </h4>
                          <div>
                            <ul
                              class="c5"
                            >
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M13.5,15.5H10V12.5H13.5C14.33,12.5 15,13.17 15,14C15,14.83 14.33,15.5 13.5,15.5M10,6.5H13C13.83,6.5 14.5,7.17 14.5,8C14.5,8.83 13.83,9.5 13,9.5H10M15.6,10.79C16.57,10.11 17.25,9 17.25,8C17.25,5.74 15.5,4 13.25,4H7V18H14.04C16.14,18 17.75,16.3 17.75,14.21C17.75,12.69 16.89,11.39 15.6,10.79Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Bold text
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M10,4V7H12.21L8.79,15H6V18H14V15H11.79L15.21,7H18V4H10Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Italic text
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M5,21H19V19H5V21M12,17C15.31,17 18,14.31 18,11V3H15.5V11C15.5,12.93 13.93,14.5 12,14.5C10.07,14.5 8.5,12.93 8.5,11V3H6V11C6,14.31 8.69,17 12,17Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Underlined text
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M3,14H21V12H3M5,4V7H10V10H14V7H19V4M10,19H14V16H10V19Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Crossed out text
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M14.6,16.6L19.2,12L14.6,7.4L16,6L22,12L16,18L14.6,16.6M9.4,16.6L4.8,12L9.4,7.4L8,6L2,12L8,18L9.4,16.6Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Code block
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M14,18V16H16V6.31L13.5,7.75V5.44L16,4H18V16H20V18H14Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    XL Header
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M21,18H15C13.9,18 13,17.1 13,16C13,15.47 13.2,15 13.54,14.64L18.41,9.41C18.78,9.05 19,8.55 19,8C19,6.9 18.1,6 17,6C15.9,6 15,6.9 15,8H13C13,5.79 14.79,4 17,4C19.21,4 21,5.79 21,8C21,9.1 20.55,10.1 19.83,10.83L15,16H21V18Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    L Header
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M15,4H19C20.1,4 21,4.9 21,6V16C21,17.1 20.1,18 19,18H15C13.9,18 13,17.1 13,16V15H15V16H19V12H15V10H19V6H15V7H13V6C13,4.9 13.9,4 15,4Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    M Header
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M7,5H21V7H7V5M7,13V11H21V13H7M4,4.5C4.83,4.5 5.5,5.17 5.5,6C5.5,6.83 4.83,7.5 4,7.5C3.17,7.5 2.5,6.83 2.5,6C2.5,5.17 3.17,4.5 4,4.5M4,10.5C4.83,10.5 5.5,11.17 5.5,12C5.5,12.83 4.83,13.5 4,13.5C3.17,13.5 2.5,12.83 2.5,12C2.5,11.17 3.17,10.5 4,10.5M7,19V17H21V19H7M4,16.5C4.83,16.5 5.5,17.17 5.5,18C5.5,18.83 4.83,19.5 4,19.5C3.17,19.5 2.5,18.83 2.5,18C2.5,17.17 3.17,16.5 4,16.5Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Bulleted List
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M7,13V11H21V13H7M7,19V17H21V19H7M7,7V5H21V7H7M3,8V5H2V4H4V8H3M2,17V16H5V20H2V19H4V18.5H3V17.5H4V17H2M4.25,10C4.66,10 5,10.34 5,10.75C5,10.95 4.92,11.14 4.79,11.27L3.12,13H5V14H2V13.08L4,11H2V10H4.25Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Ordered List
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M14,17H17L19,13V7H13V13H16M6,17H9L11,13V7H5V13H8L6,17Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Quote block
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Hyperlink
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <div
                                  class="c8"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    width="24"
                                  >
                                    <path
                                      d="M19,19H5V5H19M19,3H5C3.9,3 3,3.9 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.9 20.1,3 19,3M13.96,12.29L11.21,15.83L9.25,13.47L6.5,17H17.5L13.96,12.29Z"
                                    />
                                  </svg>
                                  <p
                                    class="tooltip c9 c10"
                                  >
                                    Embeded Image
                                  </p>
                                </div>
                              </li>
                              <li
                                class="c6 c7"
                              >
                                <a
                                  class="c11"
                                  href="#"
                                >
                                  <svg
                                    class="mdi-icon "
                                    fill="currentColor"
                                    height="27"
                                    viewBox="0 0 24 24"
                                    width="27"
                                  >
                                    <path
                                      d="M12,15H10V13H12V15M18,15H14V13H18V15M8,11H6V9H8V11M18,11H10V9H18V11M20,20H4C2.9,20 2,19.1 2,18V6C2,4.9 2.9,4 4,4H20C21.1,4 22,4.9 22,6V18C22,19.1 21.1,20 20,20M4,6V18H20V6H4Z"
                                    />
                                  </svg>
                                  <span>
                                     Preview
                                  </span>
                                </a>
                              </li>
                            </ul>
                            <textarea
                              class="c12 c13"
                              rows="1"
                              style="height: 5px;"
                            >
                              Hello world
                            </textarea>
                          </div>
                        </div>
                        <div
                          class="c14"
                        >
                          <button
                            class="c15"
                            id="btn-update"
                            type="button"
                          >
                            Submit
                          </button>
                        </div>
                        <button
                          class="styles_closeButton__20ID4"
                        >
                          <svg
                            class="styles_closeIcon__1QwbI"
                            height="28"
                            viewBox="0 0 36 36"
                            width="28"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                }
              >
                <CSSTransition
                  appear={true}
                  classNames={
                    Object {
                      "appear": "styles_transitionEnter__3j_-a",
                      "appearActive": "styles_transitionEnterActive___eQs7",
                      "enter": "styles_transitionEnter__3j_-a",
                      "enterActive": "styles_transitionEnterActive___eQs7",
                      "exit": "styles_transitionExit__1KmEf",
                      "exitActive": "styles_transitionExitActive__1nQXw",
                    }
                  }
                  in={true}
                  onEntered={[Function]}
                  onExited={[Function]}
                  timeout={500}
                >
                  <Transition
                    appear={true}
                    enter={true}
                    exit={true}
                    in={true}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={500}
                    unmountOnExit={false}
                  >
                    <div
                      className="styles_overlay__CLSq- styles_overlayCenter__YHoO7"
                      id={null}
                      onClick={[Function]}
                    >
                      <div
                        className="styles_modal__gNwvD"
                        id={null}
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        onMouseUp={[Function]}
                      >
                        <Label
                          htmlFor="author"
                          inline={false}
                          label="Author"
                          rightToLeft={false}
                        >
                          <Input__FormGroup
                            className="form-group undefined"
                          >
                            <StyledComponent
                              className="form-group undefined"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Input__FormGroup-v24ypt-4",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      "   h4{margin-bottom:10px;color:",
                                      [Function],
                                      ";}",
                                    ],
                                  },
                                  "displayName": "Input__FormGroup",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Input__FormGroup-v24ypt-4",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="form-group undefined c0"
                              >
                                <Input__H4Label
                                  htmlFor="author"
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Input__H4Label-v24ypt-5",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "color:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Input__H4Label",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Input__H4Label-v24ypt-5",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    htmlFor="author"
                                  >
                                    <h4
                                      className="c1"
                                      htmlFor="author"
                                    >
                                      Author
                                    </h4>
                                  </StyledComponent>
                                </Input__H4Label>
                                <div
                                  name="author"
                                >
                                  John Wayne
                                </div>
                              </div>
                            </StyledComponent>
                          </Input__FormGroup>
                        </Label>
                        <Label
                          htmlFor="issue"
                          inline={false}
                          label="Issue"
                          rightToLeft={false}
                        >
                          <Input__FormGroup
                            className="form-group undefined"
                          >
                            <StyledComponent
                              className="form-group undefined"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Input__FormGroup-v24ypt-4",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      "   h4{margin-bottom:10px;color:",
                                      [Function],
                                      ";}",
                                    ],
                                  },
                                  "displayName": "Input__FormGroup",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Input__FormGroup-v24ypt-4",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="form-group undefined c0"
                              >
                                <Input__H4Label
                                  htmlFor="issue"
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Input__H4Label-v24ypt-5",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "color:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Input__H4Label",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Input__H4Label-v24ypt-5",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    htmlFor="issue"
                                  >
                                    <h4
                                      className="c1"
                                      htmlFor="issue"
                                    >
                                      Issue
                                    </h4>
                                  </StyledComponent>
                                </Input__H4Label>
                                <div
                                  name="issue"
                                >
                                  #
                                  1
                                   
                                  Cover a modal with tests
                                </div>
                              </div>
                            </StyledComponent>
                          </Input__FormGroup>
                        </Label>
                        <Label
                          htmlFor="activity"
                          inline={false}
                          label="Activity"
                          rightToLeft={false}
                        >
                          <Input__FormGroup
                            className="form-group undefined"
                          >
                            <StyledComponent
                              className="form-group undefined"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Input__FormGroup-v24ypt-4",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      "   h4{margin-bottom:10px;color:",
                                      [Function],
                                      ";}",
                                    ],
                                  },
                                  "displayName": "Input__FormGroup",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Input__FormGroup-v24ypt-4",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="form-group undefined c0"
                              >
                                <Input__H4Label
                                  htmlFor="activity"
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Input__H4Label-v24ypt-5",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "color:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Input__H4Label",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Input__H4Label-v24ypt-5",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    htmlFor="activity"
                                  >
                                    <h4
                                      className="c1"
                                      htmlFor="activity"
                                    >
                                      Activity
                                    </h4>
                                  </StyledComponent>
                                </Input__H4Label>
                                <StateManager
                                  defaultInputValue=""
                                  defaultMenuIsOpen={false}
                                  defaultValue={null}
                                  isClearable={false}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "id": 1,
                                        "name": "Development",
                                      },
                                      Object {
                                        "id": 2,
                                        "name": "Testing",
                                      },
                                    ]
                                  }
                                  styles={
                                    Object {
                                      "container": [Function],
                                    }
                                  }
                                  theme={[Function]}
                                  value={
                                    Object {
                                      "id": 1,
                                      "label": "Development",
                                    }
                                  }
                                >
                                  <Select
                                    backspaceRemovesValue={true}
                                    blurInputOnSelect={true}
                                    captureMenuScroll={false}
                                    closeMenuOnScroll={false}
                                    closeMenuOnSelect={true}
                                    components={Object {}}
                                    controlShouldRenderValue={true}
                                    escapeClearsValue={false}
                                    filterOption={[Function]}
                                    formatGroupLabel={[Function]}
                                    getOptionLabel={[Function]}
                                    getOptionValue={[Function]}
                                    inputValue=""
                                    isClearable={false}
                                    isDisabled={false}
                                    isLoading={false}
                                    isMulti={false}
                                    isOptionDisabled={[Function]}
                                    isRtl={false}
                                    isSearchable={true}
                                    loadingMessage={[Function]}
                                    maxMenuHeight={300}
                                    menuIsOpen={false}
                                    menuPlacement="bottom"
                                    menuPosition="absolute"
                                    menuShouldBlockScroll={false}
                                    menuShouldScrollIntoView={true}
                                    minMenuHeight={140}
                                    noOptionsMessage={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onInputChange={[Function]}
                                    onMenuClose={[Function]}
                                    onMenuOpen={[Function]}
                                    openMenuOnClick={true}
                                    openMenuOnFocus={false}
                                    options={
                                      Array [
                                        Object {
                                          "id": 1,
                                          "name": "Development",
                                        },
                                        Object {
                                          "id": 2,
                                          "name": "Testing",
                                        },
                                      ]
                                    }
                                    pageSize={5}
                                    placeholder="Select..."
                                    screenReaderStatus={[Function]}
                                    styles={
                                      Object {
                                        "container": [Function],
                                      }
                                    }
                                    tabIndex="0"
                                    tabSelectsValue={true}
                                    theme={[Function]}
                                    value={
                                      Object {
                                        "id": 1,
                                        "label": "Development",
                                      }
                                    }
                                  >
                                    <SelectContainer
                                      clearValue={[Function]}
                                      cx={[Function]}
                                      getStyles={[Function]}
                                      getValue={[Function]}
                                      hasValue={true}
                                      innerProps={
                                        Object {
                                          "id": undefined,
                                          "onKeyDown": [Function],
                                        }
                                      }
                                      isDisabled={false}
                                      isFocused={false}
                                      isMulti={false}
                                      isRtl={false}
                                      options={
                                        Array [
                                          Object {
                                            "id": 1,
                                            "name": "Development",
                                          },
                                          Object {
                                            "id": 2,
                                            "name": "Testing",
                                          },
                                        ]
                                      }
                                      selectOption={[Function]}
                                      selectProps={
                                        Object {
                                          "backspaceRemovesValue": true,
                                          "blurInputOnSelect": true,
                                          "captureMenuScroll": false,
                                          "closeMenuOnScroll": false,
                                          "closeMenuOnSelect": true,
                                          "components": Object {},
                                          "controlShouldRenderValue": true,
                                          "escapeClearsValue": false,
                                          "filterOption": [Function],
                                          "formatGroupLabel": [Function],
                                          "getOptionLabel": [Function],
                                          "getOptionValue": [Function],
                                          "inputValue": "",
                                          "isClearable": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "isMulti": false,
                                          "isOptionDisabled": [Function],
                                          "isRtl": false,
                                          "isSearchable": true,
                                          "loadingMessage": [Function],
                                          "maxMenuHeight": 300,
                                          "menuIsOpen": false,
                                          "menuPlacement": "bottom",
                                          "menuPosition": "absolute",
                                          "menuShouldBlockScroll": false,
                                          "menuShouldScrollIntoView": true,
                                          "minMenuHeight": 140,
                                          "noOptionsMessage": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onInputChange": [Function],
                                          "onMenuClose": [Function],
                                          "onMenuOpen": [Function],
                                          "openMenuOnClick": true,
                                          "openMenuOnFocus": false,
                                          "options": Array [
                                            Object {
                                              "id": 1,
                                              "name": "Development",
                                            },
                                            Object {
                                              "id": 2,
                                              "name": "Testing",
                                            },
                                          ],
                                          "pageSize": 5,
                                          "placeholder": "Select...",
                                          "screenReaderStatus": [Function],
                                          "styles": Object {
                                            "container": [Function],
                                          },
                                          "tabIndex": "0",
                                          "tabSelectsValue": true,
                                          "theme": [Function],
                                          "value": Object {
                                            "id": 1,
                                            "label": "Development",
                                          },
                                        }
                                      }
                                      setValue={[Function]}
                                      theme={
                                        Object {
                                          "borderRadius": 3,
                                          "colors": Object {
                                            "danger": "#DE350B",
                                            "dangerLight": "#FFBDAD",
                                            "neutral0": "hsl(0, 0%, 100%)",
                                            "neutral10": "hsl(0, 0%, 90%)",
                                            "neutral20": "hsl(0, 0%, 80%)",
                                            "neutral30": "hsl(0, 0%, 70%)",
                                            "neutral40": "hsl(0, 0%, 60%)",
                                            "neutral5": "hsl(0, 0%, 95%)",
                                            "neutral50": "hsl(0, 0%, 50%)",
                                            "neutral60": "hsl(0, 0%, 40%)",
                                            "neutral70": "hsl(0, 0%, 30%)",
                                            "neutral80": "hsl(0, 0%, 20%)",
                                            "neutral90": "hsl(0, 0%, 10%)",
                                            "primary": "#FF7079",
                                            "primary25": "#DEEBFF",
                                            "primary50": "#B2D4FF",
                                            "primary75": "#4C9AFF",
                                          },
                                          "spacing": Object {
                                            "baseUnit": 4,
                                            "controlHeight": 38,
                                            "menuGutter": 8,
                                          },
                                        }
                                      }
                                    >
                                      <div
                                        className="css-10nd86i"
                                        onKeyDown={[Function]}
                                      >
                                        <Control
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          innerProps={
                                            Object {
                                              "onMouseDown": [Function],
                                              "onTouchEnd": [Function],
                                            }
                                          }
                                          innerRef={[Function]}
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          menuIsOpen={false}
                                          options={
                                            Array [
                                              Object {
                                                "id": 1,
                                                "name": "Development",
                                              },
                                              Object {
                                                "id": 2,
                                                "name": "Testing",
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {},
                                              "controlShouldRenderValue": true,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "inputValue": "",
                                              "isClearable": false,
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "bottom",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "id": 1,
                                                  "name": "Development",
                                                },
                                                Object {
                                                  "id": 2,
                                                  "name": "Testing",
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "container": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": Object {
                                                "id": 1,
                                                "label": "Development",
                                              },
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 3,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "hsl(0, 0%, 50%)",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#FF7079",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <div
                                            className="css-1rcfx4g"
                                            onMouseDown={[Function]}
                                            onTouchEnd={[Function]}
                                          >
                                            <ValueContainer
                                              clearValue={[Function]}
                                              cx={[Function]}
                                              getStyles={[Function]}
                                              getValue={[Function]}
                                              hasValue={true}
                                              isDisabled={false}
                                              isMulti={false}
                                              isRtl={false}
                                              options={
                                                Array [
                                                  Object {
                                                    "id": 1,
                                                    "name": "Development",
                                                  },
                                                  Object {
                                                    "id": 2,
                                                    "name": "Testing",
                                                  },
                                                ]
                                              }
                                              selectOption={[Function]}
                                              selectProps={
                                                Object {
                                                  "backspaceRemovesValue": true,
                                                  "blurInputOnSelect": true,
                                                  "captureMenuScroll": false,
                                                  "closeMenuOnScroll": false,
                                                  "closeMenuOnSelect": true,
                                                  "components": Object {},
                                                  "controlShouldRenderValue": true,
                                                  "escapeClearsValue": false,
                                                  "filterOption": [Function],
                                                  "formatGroupLabel": [Function],
                                                  "getOptionLabel": [Function],
                                                  "getOptionValue": [Function],
                                                  "inputValue": "",
                                                  "isClearable": false,
                                                  "isDisabled": false,
                                                  "isLoading": false,
                                                  "isMulti": false,
                                                  "isOptionDisabled": [Function],
                                                  "isRtl": false,
                                                  "isSearchable": true,
                                                  "loadingMessage": [Function],
                                                  "maxMenuHeight": 300,
                                                  "menuIsOpen": false,
                                                  "menuPlacement": "bottom",
                                                  "menuPosition": "absolute",
                                                  "menuShouldBlockScroll": false,
                                                  "menuShouldScrollIntoView": true,
                                                  "minMenuHeight": 140,
                                                  "noOptionsMessage": [Function],
                                                  "onBlur": [Function],
                                                  "onChange": [Function],
                                                  "onInputChange": [Function],
                                                  "onMenuClose": [Function],
                                                  "onMenuOpen": [Function],
                                                  "openMenuOnClick": true,
                                                  "openMenuOnFocus": false,
                                                  "options": Array [
                                                    Object {
                                                      "id": 1,
                                                      "name": "Development",
                                                    },
                                                    Object {
                                                      "id": 2,
                                                      "name": "Testing",
                                                    },
                                                  ],
                                                  "pageSize": 5,
                                                  "placeholder": "Select...",
                                                  "screenReaderStatus": [Function],
                                                  "styles": Object {
                                                    "container": [Function],
                                                  },
                                                  "tabIndex": "0",
                                                  "tabSelectsValue": true,
                                                  "theme": [Function],
                                                  "value": Object {
                                                    "id": 1,
                                                    "label": "Development",
                                                  },
                                                }
                                              }
                                              setValue={[Function]}
                                              theme={
                                                Object {
                                                  "borderRadius": 3,
                                                  "colors": Object {
                                                    "danger": "#DE350B",
                                                    "dangerLight": "#FFBDAD",
                                                    "neutral0": "hsl(0, 0%, 100%)",
                                                    "neutral10": "hsl(0, 0%, 90%)",
                                                    "neutral20": "hsl(0, 0%, 80%)",
                                                    "neutral30": "hsl(0, 0%, 70%)",
                                                    "neutral40": "hsl(0, 0%, 60%)",
                                                    "neutral5": "hsl(0, 0%, 95%)",
                                                    "neutral50": "hsl(0, 0%, 50%)",
                                                    "neutral60": "hsl(0, 0%, 40%)",
                                                    "neutral70": "hsl(0, 0%, 30%)",
                                                    "neutral80": "hsl(0, 0%, 20%)",
                                                    "neutral90": "hsl(0, 0%, 10%)",
                                                    "primary": "#FF7079",
                                                    "primary25": "#DEEBFF",
                                                    "primary50": "#B2D4FF",
                                                    "primary75": "#4C9AFF",
                                                  },
                                                  "spacing": Object {
                                                    "baseUnit": 4,
                                                    "controlHeight": 38,
                                                    "menuGutter": 8,
                                                  },
                                                }
                                              }
                                            >
                                              <div
                                                className="css-1hwfws3"
                                              >
                                                <SingleValue
                                                  clearValue={[Function]}
                                                  cx={[Function]}
                                                  data={
                                                    Object {
                                                      "id": 1,
                                                      "label": "Development",
                                                    }
                                                  }
                                                  getStyles={[Function]}
                                                  getValue={[Function]}
                                                  hasValue={true}
                                                  isDisabled={false}
                                                  isMulti={false}
                                                  isRtl={false}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "id": 1,
                                                        "name": "Development",
                                                      },
                                                      Object {
                                                        "id": 2,
                                                        "name": "Testing",
                                                      },
                                                    ]
                                                  }
                                                  selectOption={[Function]}
                                                  selectProps={
                                                    Object {
                                                      "backspaceRemovesValue": true,
                                                      "blurInputOnSelect": true,
                                                      "captureMenuScroll": false,
                                                      "closeMenuOnScroll": false,
                                                      "closeMenuOnSelect": true,
                                                      "components": Object {},
                                                      "controlShouldRenderValue": true,
                                                      "escapeClearsValue": false,
                                                      "filterOption": [Function],
                                                      "formatGroupLabel": [Function],
                                                      "getOptionLabel": [Function],
                                                      "getOptionValue": [Function],
                                                      "inputValue": "",
                                                      "isClearable": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "isMulti": false,
                                                      "isOptionDisabled": [Function],
                                                      "isRtl": false,
                                                      "isSearchable": true,
                                                      "loadingMessage": [Function],
                                                      "maxMenuHeight": 300,
                                                      "menuIsOpen": false,
                                                      "menuPlacement": "bottom",
                                                      "menuPosition": "absolute",
                                                      "menuShouldBlockScroll": false,
                                                      "menuShouldScrollIntoView": true,
                                                      "minMenuHeight": 140,
                                                      "noOptionsMessage": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onInputChange": [Function],
                                                      "onMenuClose": [Function],
                                                      "onMenuOpen": [Function],
                                                      "openMenuOnClick": true,
                                                      "openMenuOnFocus": false,
                                                      "options": Array [
                                                        Object {
                                                          "id": 1,
                                                          "name": "Development",
                                                        },
                                                        Object {
                                                          "id": 2,
                                                          "name": "Testing",
                                                        },
                                                      ],
                                                      "pageSize": 5,
                                                      "placeholder": "Select...",
                                                      "screenReaderStatus": [Function],
                                                      "styles": Object {
                                                        "container": [Function],
                                                      },
                                                      "tabIndex": "0",
                                                      "tabSelectsValue": true,
                                                      "theme": [Function],
                                                      "value": Object {
                                                        "id": 1,
                                                        "label": "Development",
                                                      },
                                                    }
                                                  }
                                                  setValue={[Function]}
                                                  theme={
                                                    Object {
                                                      "borderRadius": 3,
                                                      "colors": Object {
                                                        "danger": "#DE350B",
                                                        "dangerLight": "#FFBDAD",
                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                        "primary": "#FF7079",
                                                        "primary25": "#DEEBFF",
                                                        "primary50": "#B2D4FF",
                                                        "primary75": "#4C9AFF",
                                                      },
                                                      "spacing": Object {
                                                        "baseUnit": 4,
                                                        "controlHeight": 38,
                                                        "menuGutter": 8,
                                                      },
                                                    }
                                                  }
                                                >
                                                  <div
                                                    className="css-xp4uvy"
                                                  >
                                                    Development
                                                  </div>
                                                </SingleValue>
                                                <Input
                                                  aria-autocomplete="list"
                                                  autoCapitalize="none"
                                                  autoComplete="off"
                                                  autoCorrect="off"
                                                  cx={[Function]}
                                                  getStyles={[Function]}
                                                  id="react-select-2-input"
                                                  innerRef={[Function]}
                                                  isDisabled={false}
                                                  isHidden={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  selectProps={
                                                    Object {
                                                      "backspaceRemovesValue": true,
                                                      "blurInputOnSelect": true,
                                                      "captureMenuScroll": false,
                                                      "closeMenuOnScroll": false,
                                                      "closeMenuOnSelect": true,
                                                      "components": Object {},
                                                      "controlShouldRenderValue": true,
                                                      "escapeClearsValue": false,
                                                      "filterOption": [Function],
                                                      "formatGroupLabel": [Function],
                                                      "getOptionLabel": [Function],
                                                      "getOptionValue": [Function],
                                                      "inputValue": "",
                                                      "isClearable": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "isMulti": false,
                                                      "isOptionDisabled": [Function],
                                                      "isRtl": false,
                                                      "isSearchable": true,
                                                      "loadingMessage": [Function],
                                                      "maxMenuHeight": 300,
                                                      "menuIsOpen": false,
                                                      "menuPlacement": "bottom",
                                                      "menuPosition": "absolute",
                                                      "menuShouldBlockScroll": false,
                                                      "menuShouldScrollIntoView": true,
                                                      "minMenuHeight": 140,
                                                      "noOptionsMessage": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onInputChange": [Function],
                                                      "onMenuClose": [Function],
                                                      "onMenuOpen": [Function],
                                                      "openMenuOnClick": true,
                                                      "openMenuOnFocus": false,
                                                      "options": Array [
                                                        Object {
                                                          "id": 1,
                                                          "name": "Development",
                                                        },
                                                        Object {
                                                          "id": 2,
                                                          "name": "Testing",
                                                        },
                                                      ],
                                                      "pageSize": 5,
                                                      "placeholder": "Select...",
                                                      "screenReaderStatus": [Function],
                                                      "styles": Object {
                                                        "container": [Function],
                                                      },
                                                      "tabIndex": "0",
                                                      "tabSelectsValue": true,
                                                      "theme": [Function],
                                                      "value": Object {
                                                        "id": 1,
                                                        "label": "Development",
                                                      },
                                                    }
                                                  }
                                                  spellCheck="false"
                                                  tabIndex="0"
                                                  theme={
                                                    Object {
                                                      "borderRadius": 3,
                                                      "colors": Object {
                                                        "danger": "#DE350B",
                                                        "dangerLight": "#FFBDAD",
                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                        "primary": "#FF7079",
                                                        "primary25": "#DEEBFF",
                                                        "primary50": "#B2D4FF",
                                                        "primary75": "#4C9AFF",
                                                      },
                                                      "spacing": Object {
                                                        "baseUnit": 4,
                                                        "controlHeight": 38,
                                                        "menuGutter": 8,
                                                      },
                                                    }
                                                  }
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className="css-1g6gooi"
                                                  >
                                                    <AutosizeInput
                                                      aria-autocomplete="list"
                                                      autoCapitalize="none"
                                                      autoComplete="off"
                                                      autoCorrect="off"
                                                      className=""
                                                      disabled={false}
                                                      id="react-select-2-input"
                                                      injectStyles={true}
                                                      inputRef={[Function]}
                                                      inputStyle={
                                                        Object {
                                                          "background": 0,
                                                          "border": 0,
                                                          "color": "inherit",
                                                          "fontSize": "inherit",
                                                          "opacity": 1,
                                                          "outline": 0,
                                                          "padding": 0,
                                                        }
                                                      }
                                                      minWidth={1}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      spellCheck="false"
                                                      tabIndex="0"
                                                      type="text"
                                                      value=""
                                                    >
                                                      <div
                                                        className=""
                                                        style={
                                                          Object {
                                                            "display": "inline-block",
                                                          }
                                                        }
                                                      >
                                                        <input
                                                          aria-autocomplete="list"
                                                          autoCapitalize="none"
                                                          autoComplete="off"
                                                          autoCorrect="off"
                                                          disabled={false}
                                                          id="react-select-2-input"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          spellCheck="false"
                                                          style={
                                                            Object {
                                                              "background": 0,
                                                              "border": 0,
                                                              "boxSizing": "content-box",
                                                              "color": "inherit",
                                                              "fontSize": "inherit",
                                                              "opacity": 1,
                                                              "outline": 0,
                                                              "padding": 0,
                                                              "width": "2px",
                                                            }
                                                          }
                                                          tabIndex="0"
                                                          type="text"
                                                          value=""
                                                        />
                                                        <div
                                                          style={
                                                            Object {
                                                              "height": 0,
                                                              "left": 0,
                                                              "overflow": "scroll",
                                                              "position": "absolute",
                                                              "top": 0,
                                                              "visibility": "hidden",
                                                              "whiteSpace": "pre",
                                                            }
                                                          }
                                                        />
                                                      </div>
                                                    </AutosizeInput>
                                                  </div>
                                                </Input>
                                              </div>
                                            </ValueContainer>
                                            <IndicatorsContainer
                                              clearValue={[Function]}
                                              cx={[Function]}
                                              getStyles={[Function]}
                                              getValue={[Function]}
                                              hasValue={true}
                                              isDisabled={false}
                                              isMulti={false}
                                              isRtl={false}
                                              options={
                                                Array [
                                                  Object {
                                                    "id": 1,
                                                    "name": "Development",
                                                  },
                                                  Object {
                                                    "id": 2,
                                                    "name": "Testing",
                                                  },
                                                ]
                                              }
                                              selectOption={[Function]}
                                              selectProps={
                                                Object {
                                                  "backspaceRemovesValue": true,
                                                  "blurInputOnSelect": true,
                                                  "captureMenuScroll": false,
                                                  "closeMenuOnScroll": false,
                                                  "closeMenuOnSelect": true,
                                                  "components": Object {},
                                                  "controlShouldRenderValue": true,
                                                  "escapeClearsValue": false,
                                                  "filterOption": [Function],
                                                  "formatGroupLabel": [Function],
                                                  "getOptionLabel": [Function],
                                                  "getOptionValue": [Function],
                                                  "inputValue": "",
                                                  "isClearable": false,
                                                  "isDisabled": false,
                                                  "isLoading": false,
                                                  "isMulti": false,
                                                  "isOptionDisabled": [Function],
                                                  "isRtl": false,
                                                  "isSearchable": true,
                                                  "loadingMessage": [Function],
                                                  "maxMenuHeight": 300,
                                                  "menuIsOpen": false,
                                                  "menuPlacement": "bottom",
                                                  "menuPosition": "absolute",
                                                  "menuShouldBlockScroll": false,
                                                  "menuShouldScrollIntoView": true,
                                                  "minMenuHeight": 140,
                                                  "noOptionsMessage": [Function],
                                                  "onBlur": [Function],
                                                  "onChange": [Function],
                                                  "onInputChange": [Function],
                                                  "onMenuClose": [Function],
                                                  "onMenuOpen": [Function],
                                                  "openMenuOnClick": true,
                                                  "openMenuOnFocus": false,
                                                  "options": Array [
                                                    Object {
                                                      "id": 1,
                                                      "name": "Development",
                                                    },
                                                    Object {
                                                      "id": 2,
                                                      "name": "Testing",
                                                    },
                                                  ],
                                                  "pageSize": 5,
                                                  "placeholder": "Select...",
                                                  "screenReaderStatus": [Function],
                                                  "styles": Object {
                                                    "container": [Function],
                                                  },
                                                  "tabIndex": "0",
                                                  "tabSelectsValue": true,
                                                  "theme": [Function],
                                                  "value": Object {
                                                    "id": 1,
                                                    "label": "Development",
                                                  },
                                                }
                                              }
                                              setValue={[Function]}
                                              theme={
                                                Object {
                                                  "borderRadius": 3,
                                                  "colors": Object {
                                                    "danger": "#DE350B",
                                                    "dangerLight": "#FFBDAD",
                                                    "neutral0": "hsl(0, 0%, 100%)",
                                                    "neutral10": "hsl(0, 0%, 90%)",
                                                    "neutral20": "hsl(0, 0%, 80%)",
                                                    "neutral30": "hsl(0, 0%, 70%)",
                                                    "neutral40": "hsl(0, 0%, 60%)",
                                                    "neutral5": "hsl(0, 0%, 95%)",
                                                    "neutral50": "hsl(0, 0%, 50%)",
                                                    "neutral60": "hsl(0, 0%, 40%)",
                                                    "neutral70": "hsl(0, 0%, 30%)",
                                                    "neutral80": "hsl(0, 0%, 20%)",
                                                    "neutral90": "hsl(0, 0%, 10%)",
                                                    "primary": "#FF7079",
                                                    "primary25": "#DEEBFF",
                                                    "primary50": "#B2D4FF",
                                                    "primary75": "#4C9AFF",
                                                  },
                                                  "spacing": Object {
                                                    "baseUnit": 4,
                                                    "controlHeight": 38,
                                                    "menuGutter": 8,
                                                  },
                                                }
                                              }
                                            >
                                              <div
                                                className="css-1wy0on6"
                                              >
                                                <IndicatorSeparator
                                                  clearValue={[Function]}
                                                  cx={[Function]}
                                                  getStyles={[Function]}
                                                  getValue={[Function]}
                                                  hasValue={true}
                                                  isDisabled={false}
                                                  isFocused={false}
                                                  isMulti={false}
                                                  isRtl={false}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "id": 1,
                                                        "name": "Development",
                                                      },
                                                      Object {
                                                        "id": 2,
                                                        "name": "Testing",
                                                      },
                                                    ]
                                                  }
                                                  selectOption={[Function]}
                                                  selectProps={
                                                    Object {
                                                      "backspaceRemovesValue": true,
                                                      "blurInputOnSelect": true,
                                                      "captureMenuScroll": false,
                                                      "closeMenuOnScroll": false,
                                                      "closeMenuOnSelect": true,
                                                      "components": Object {},
                                                      "controlShouldRenderValue": true,
                                                      "escapeClearsValue": false,
                                                      "filterOption": [Function],
                                                      "formatGroupLabel": [Function],
                                                      "getOptionLabel": [Function],
                                                      "getOptionValue": [Function],
                                                      "inputValue": "",
                                                      "isClearable": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "isMulti": false,
                                                      "isOptionDisabled": [Function],
                                                      "isRtl": false,
                                                      "isSearchable": true,
                                                      "loadingMessage": [Function],
                                                      "maxMenuHeight": 300,
                                                      "menuIsOpen": false,
                                                      "menuPlacement": "bottom",
                                                      "menuPosition": "absolute",
                                                      "menuShouldBlockScroll": false,
                                                      "menuShouldScrollIntoView": true,
                                                      "minMenuHeight": 140,
                                                      "noOptionsMessage": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onInputChange": [Function],
                                                      "onMenuClose": [Function],
                                                      "onMenuOpen": [Function],
                                                      "openMenuOnClick": true,
                                                      "openMenuOnFocus": false,
                                                      "options": Array [
                                                        Object {
                                                          "id": 1,
                                                          "name": "Development",
                                                        },
                                                        Object {
                                                          "id": 2,
                                                          "name": "Testing",
                                                        },
                                                      ],
                                                      "pageSize": 5,
                                                      "placeholder": "Select...",
                                                      "screenReaderStatus": [Function],
                                                      "styles": Object {
                                                        "container": [Function],
                                                      },
                                                      "tabIndex": "0",
                                                      "tabSelectsValue": true,
                                                      "theme": [Function],
                                                      "value": Object {
                                                        "id": 1,
                                                        "label": "Development",
                                                      },
                                                    }
                                                  }
                                                  setValue={[Function]}
                                                  theme={
                                                    Object {
                                                      "borderRadius": 3,
                                                      "colors": Object {
                                                        "danger": "#DE350B",
                                                        "dangerLight": "#FFBDAD",
                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                        "primary": "#FF7079",
                                                        "primary25": "#DEEBFF",
                                                        "primary50": "#B2D4FF",
                                                        "primary75": "#4C9AFF",
                                                      },
                                                      "spacing": Object {
                                                        "baseUnit": 4,
                                                        "controlHeight": 38,
                                                        "menuGutter": 8,
                                                      },
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="css-d8oujb"
                                                  />
                                                </IndicatorSeparator>
                                                <DropdownIndicator
                                                  clearValue={[Function]}
                                                  cx={[Function]}
                                                  getStyles={[Function]}
                                                  getValue={[Function]}
                                                  hasValue={true}
                                                  innerProps={
                                                    Object {
                                                      "aria-hidden": "true",
                                                      "onMouseDown": [Function],
                                                      "onTouchEnd": [Function],
                                                    }
                                                  }
                                                  isDisabled={false}
                                                  isFocused={false}
                                                  isMulti={false}
                                                  isRtl={false}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "id": 1,
                                                        "name": "Development",
                                                      },
                                                      Object {
                                                        "id": 2,
                                                        "name": "Testing",
                                                      },
                                                    ]
                                                  }
                                                  selectOption={[Function]}
                                                  selectProps={
                                                    Object {
                                                      "backspaceRemovesValue": true,
                                                      "blurInputOnSelect": true,
                                                      "captureMenuScroll": false,
                                                      "closeMenuOnScroll": false,
                                                      "closeMenuOnSelect": true,
                                                      "components": Object {},
                                                      "controlShouldRenderValue": true,
                                                      "escapeClearsValue": false,
                                                      "filterOption": [Function],
                                                      "formatGroupLabel": [Function],
                                                      "getOptionLabel": [Function],
                                                      "getOptionValue": [Function],
                                                      "inputValue": "",
                                                      "isClearable": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "isMulti": false,
                                                      "isOptionDisabled": [Function],
                                                      "isRtl": false,
                                                      "isSearchable": true,
                                                      "loadingMessage": [Function],
                                                      "maxMenuHeight": 300,
                                                      "menuIsOpen": false,
                                                      "menuPlacement": "bottom",
                                                      "menuPosition": "absolute",
                                                      "menuShouldBlockScroll": false,
                                                      "menuShouldScrollIntoView": true,
                                                      "minMenuHeight": 140,
                                                      "noOptionsMessage": [Function],
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onInputChange": [Function],
                                                      "onMenuClose": [Function],
                                                      "onMenuOpen": [Function],
                                                      "openMenuOnClick": true,
                                                      "openMenuOnFocus": false,
                                                      "options": Array [
                                                        Object {
                                                          "id": 1,
                                                          "name": "Development",
                                                        },
                                                        Object {
                                                          "id": 2,
                                                          "name": "Testing",
                                                        },
                                                      ],
                                                      "pageSize": 5,
                                                      "placeholder": "Select...",
                                                      "screenReaderStatus": [Function],
                                                      "styles": Object {
                                                        "container": [Function],
                                                      },
                                                      "tabIndex": "0",
                                                      "tabSelectsValue": true,
                                                      "theme": [Function],
                                                      "value": Object {
                                                        "id": 1,
                                                        "label": "Development",
                                                      },
                                                    }
                                                  }
                                                  setValue={[Function]}
                                                  theme={
                                                    Object {
                                                      "borderRadius": 3,
                                                      "colors": Object {
                                                        "danger": "#DE350B",
                                                        "dangerLight": "#FFBDAD",
                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                        "primary": "#FF7079",
                                                        "primary25": "#DEEBFF",
                                                        "primary50": "#B2D4FF",
                                                        "primary75": "#4C9AFF",
                                                      },
                                                      "spacing": Object {
                                                        "baseUnit": 4,
                                                        "controlHeight": 38,
                                                        "menuGutter": 8,
                                                      },
                                                    }
                                                  }
                                                >
                                                  <div
                                                    aria-hidden="true"
                                                    className="css-1ep9fjw"
                                                    onMouseDown={[Function]}
                                                    onTouchEnd={[Function]}
                                                  >
                                                    <DownChevron>
                                                      <Svg
                                                        size={20}
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          className="css-19bqh2r"
                                                          focusable="false"
                                                          height={20}
                                                          viewBox="0 0 20 20"
                                                          width={20}
                                                        >
                                                          <path
                                                            d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                          />
                                                        </svg>
                                                      </Svg>
                                                    </DownChevron>
                                                  </div>
                                                </DropdownIndicator>
                                              </div>
                                            </IndicatorsContainer>
                                          </div>
                                        </Control>
                                      </div>
                                    </SelectContainer>
                                  </Select>
                                </StateManager>
                              </div>
                            </StyledComponent>
                          </Input__FormGroup>
                        </Label>
                        <ErrorMessage
                          show={false}
                        />
                        <TimeEntryModal__FlexRow>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "TimeEntryModal__FlexRow-neua1m-0",
                                  "isStatic": true,
                                  "lastClassName": "c2",
                                  "rules": Array [
                                    "display:flex;justify-content:space-between;",
                                  ],
                                },
                                "displayName": "TimeEntryModal__FlexRow",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "TimeEntryModal__FlexRow-neua1m-0",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c2"
                            >
                              <div>
                                <Label
                                  htmlFor="hours"
                                  inline={false}
                                  label="Hours"
                                  rightToLeft={false}
                                >
                                  <Input__FormGroup
                                    className="form-group undefined"
                                  >
                                    <StyledComponent
                                      className="form-group undefined"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input__FormGroup-v24ypt-4",
                                            "isStatic": false,
                                            "lastClassName": "c0",
                                            "rules": Array [
                                              "   h4{margin-bottom:10px;color:",
                                              [Function],
                                              ";}",
                                            ],
                                          },
                                          "displayName": "Input__FormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input__FormGroup-v24ypt-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="form-group undefined c0"
                                      >
                                        <Input__H4Label
                                          htmlFor="hours"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Input__H4Label-v24ypt-5",
                                                  "isStatic": false,
                                                  "lastClassName": "c1",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "Input__H4Label",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Input__H4Label-v24ypt-5",
                                                "target": "h4",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            htmlFor="hours"
                                          >
                                            <h4
                                              className="c1"
                                              htmlFor="hours"
                                            >
                                              Hours
                                            </h4>
                                          </StyledComponent>
                                        </Input__H4Label>
                                        <Input
                                          checked={false}
                                          disabled={false}
                                          name="hours"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="number"
                                          value={10}
                                        >
                                          <Input__StyledInput
                                            disabled={false}
                                            name="hours"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="number"
                                            value={10}
                                          >
                                            <StyledComponent
                                              disabled={false}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Input__StyledInput-v24ypt-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c3",
                                                    "rules": Array [
                                                      "display:block;width:100%;border-radius:3px;padding:5px 10px;box-sizing:border-box;font-size:14px;min-height:35px;outline:none;font-weight:bold;",
                                                      [Function],
                                                      "}",
                                                    ],
                                                  },
                                                  "displayName": "Input__StyledInput",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Input__StyledInput-v24ypt-0",
                                                  "target": "input",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              name="hours"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              type="number"
                                              value={10}
                                            >
                                              <input
                                                className="c3"
                                                disabled={false}
                                                name="hours"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                type="number"
                                                value={10}
                                              />
                                            </StyledComponent>
                                          </Input__StyledInput>
                                        </Input>
                                      </div>
                                    </StyledComponent>
                                  </Input__FormGroup>
                                </Label>
                                <ErrorMessage
                                  show={false}
                                />
                              </div>
                              <div>
                                <Label
                                  htmlFor="spent_on"
                                  inline={false}
                                  label="Date"
                                  rightToLeft={false}
                                >
                                  <Input__FormGroup
                                    className="form-group undefined"
                                  >
                                    <StyledComponent
                                      className="form-group undefined"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Input__FormGroup-v24ypt-4",
                                            "isStatic": false,
                                            "lastClassName": "c0",
                                            "rules": Array [
                                              "   h4{margin-bottom:10px;color:",
                                              [Function],
                                              ";}",
                                            ],
                                          },
                                          "displayName": "Input__FormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Input__FormGroup-v24ypt-4",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="form-group undefined c0"
                                      >
                                        <Input__H4Label
                                          htmlFor="spent_on"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Input__H4Label-v24ypt-5",
                                                  "isStatic": false,
                                                  "lastClassName": "c1",
                                                  "rules": Array [
                                                    "color:",
                                                    [Function],
                                                    ";",
                                                  ],
                                                },
                                                "displayName": "Input__H4Label",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Input__H4Label-v24ypt-5",
                                                "target": "h4",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            htmlFor="spent_on"
                                          >
                                            <h4
                                              className="c1"
                                              htmlFor="spent_on"
                                            >
                                              Date
                                            </h4>
                                          </StyledComponent>
                                        </Input__H4Label>
                                        <WithTheme(DatePicker)
                                          isDisabled={false}
                                          name="date"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value={2011-01-01T00:00:00.000Z}
                                        >
                                          <DatePicker
                                            isDisabled={false}
                                            name="date"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            theme={
                                              Object {
                                                "bg": "#FFFFFF",
                                                "bgDark": "#F9F9F9",
                                                "green": "#6CCA51",
                                                "hoverText": "#FFFFFF",
                                                "main": "#FF7079",
                                                "mainDark": "#EF6069",
                                                "mainLight": "#FF7F87",
                                                "minorText": "#909090",
                                                "normalText": "#3F3844",
                                                "red": "#FF634D",
                                                "transitionTime": ".2s",
                                                "yellow": "#FFDA77",
                                              }
                                            }
                                            value={2011-01-01T00:00:00.000Z}
                                          >
                                            <DatePicker__StyledDatePicker
                                              buttonLeft="%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M14%2C7L9%2C12L14%2C17V7Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E"
                                              buttonRight="%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M10%2C17L15%2C12L10%2C7V17Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E"
                                            >
                                              <StyledComponent
                                                buttonLeft="%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M14%2C7L9%2C12L14%2C17V7Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E"
                                                buttonRight="%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20class%3D%22mdi-icon%20%22%20width%3D%2224%22%20height%3D%2224%22%20fill%3D%22%233F3844%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M10%2C17L15%2C12L10%2C7V17Z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "DatePicker__StyledDatePicker-sc-1kolmcy-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c4",
                                                      "rules": Array [
                                                        ".DayPicker{display:inline-block;font-size:1rem;}.DayPicker-wrapper{position:relative;flex-direction:row;padding-bottom:1em;user-select:none;}.DayPicker-Months{display:flex;flex-wrap:wrap;justify-content:center;}.DayPicker-Month{display:table;margin:0 1em;margin-top:1em;border-spacing:0;border-collapse:collapse;user-select:none;}.DayPicker-NavButton{position:absolute;top:1em;right:1.5em;left:auto;display:inline-block;margin-top:2px;width:1.25em;height:1.25em;background-position:center;background-size:50%;background-repeat:no-repeat;cursor:pointer;}.DayPicker-NavButton:hover{opacity:0.8;}.DayPicker-NavButton--prev{margin-right:1.5em;left:1.5em;right:unset;background-image:url('data:image/svg+xml;utf8,",
                                                        [Function],
                                                        "');background-size:1.5rem;}.DayPicker-NavButton--next{background-image:url('data:image/svg+xml;utf8,",
                                                        [Function],
                                                        "');background-size:1.5rem;}.DayPicker-NavButton--interactionDisabled{display:none;}.DayPicker-Caption{display:table-caption;margin-bottom:0.5em;padding:0 0.5em;text-align:center;}.DayPicker-Caption > div{font-weight:500;font-size:1.15em;}.DayPicker-Weekdays{display:table-header-group;margin-top:1em;}.DayPicker-WeekdaysRow{display:table-row;}.DayPicker-Weekday{display:table-cell;padding:0.5em;color:",
                                                        [Function],
                                                        ";font-weight:bold;text-align:center;font-size:0.875em;}.DayPicker-Weekday abbr[title]{border-bottom:none;text-decoration:none;}.DayPicker-Body{display:table-row-group;}.DayPicker-Week{display:table-row;}.DayPicker-Day{display:table-cell;padding:0.5em;border-radius:50%;vertical-align:middle;text-align:center;cursor:pointer;}.DayPicker--interactionDisabled .DayPicker-Day{cursor:default;}.DayPicker-Footer{padding-top:0.5em;}.DayPicker-Day--today{color:",
                                                        [Function],
                                                        ";font-weight:700;}.DayPicker-Day--disabled{color:",
                                                        [Function],
                                                        ";cursor:default;}.DayPicker-Day--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside){position:relative;background-color:",
                                                        [Function],
                                                        ";color:",
                                                        [Function],
                                                        ";font-weight:bold;}.DayPicker:not(.DayPicker--interactionDisabled) .DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover{background-color:",
                                                        [Function],
                                                        ";color:",
                                                        [Function],
                                                        ";}.DayPickerInput{display:inline-block;}.DayPickerInput-OverlayWrapper{position:relative;left:-30%;bottom:-5px;}.DayPickerInput-Overlay{position:absolute;left:0;z-index:1;background:",
                                                        [Function],
                                                        ";box-shadow:0 2px 5px rgba(0,0,0,0.15);}",
                                                      ],
                                                    },
                                                    "displayName": "DatePicker__StyledDatePicker",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "DatePicker__StyledDatePicker-sc-1kolmcy-0",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="c4"
                                                >
                                                  <DayPickerInput
                                                    classNames={
                                                      Object {
                                                        "container": "DayPickerInput",
                                                        "overlay": "DayPickerInput-Overlay",
                                                        "overlayWrapper": "DayPickerInput-OverlayWrapper",
                                                      }
                                                    }
                                                    clickUnselectsDay={false}
                                                    component={[Function]}
                                                    dayPickerProps={Object {}}
                                                    disabled={false}
                                                    format="L"
                                                    formatDate={[Function]}
                                                    hideOnDayClick={true}
                                                    inputProps={Object {}}
                                                    keepFocus={true}
                                                    name="date"
                                                    onChange={[Function]}
                                                    overlayComponent={[Function]}
                                                    parseDate={[Function]}
                                                    placeholder="YYYY-M-D"
                                                    showOverlay={false}
                                                    value={2011-01-01T00:00:00.000Z}
                                                  >
                                                    <div
                                                      className="DayPickerInput"
                                                    >
                                                      <component
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onClick={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        placeholder="YYYY-M-D"
                                                        value="2011-1-1"
                                                      >
                                                        <Input
                                                          checked={false}
                                                          disabled={false}
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          placeholder="YYYY-M-D"
                                                          type="text"
                                                          value="2011-1-1"
                                                        >
                                                          <Input__StyledInput
                                                            disabled={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyUp={[Function]}
                                                            placeholder="YYYY-M-D"
                                                            type="text"
                                                            value="2011-1-1"
                                                          >
                                                            <StyledComponent
                                                              disabled={false}
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "Input__StyledInput-v24ypt-0",
                                                                    "isStatic": false,
                                                                    "lastClassName": "c3",
                                                                    "rules": Array [
                                                                      "display:block;width:100%;border-radius:3px;padding:5px 10px;box-sizing:border-box;font-size:14px;min-height:35px;outline:none;font-weight:bold;",
                                                                      [Function],
                                                                      "}",
                                                                    ],
                                                                  },
                                                                  "displayName": "Input__StyledInput",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "Input__StyledInput-v24ypt-0",
                                                                  "target": "input",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyUp={[Function]}
                                                              placeholder="YYYY-M-D"
                                                              type="text"
                                                              value="2011-1-1"
                                                            >
                                                              <input
                                                                className="c3"
                                                                disabled={false}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onClick={[Function]}
                                                                onFocus={[Function]}
                                                                onKeyUp={[Function]}
                                                                placeholder="YYYY-M-D"
                                                                type="text"
                                                                value="2011-1-1"
                                                              />
                                                            </StyledComponent>
                                                          </Input__StyledInput>
                                                        </Input>
                                                      </component>
                                                    </div>
                                                  </DayPickerInput>
                                                </div>
                                              </StyledComponent>
                                            </DatePicker__StyledDatePicker>
                                          </DatePicker>
                                        </WithTheme(DatePicker)>
                                      </div>
                                    </StyledComponent>
                                  </Input__FormGroup>
                                </Label>
                                <ErrorMessage
                                  show={false}
                                />
                              </div>
                            </div>
                          </StyledComponent>
                        </TimeEntryModal__FlexRow>
                        <Label
                          htmlFor="comments"
                          inline={false}
                          label="Comments"
                          rightToLeft={false}
                        >
                          <Input__FormGroup
                            className="form-group undefined"
                          >
                            <StyledComponent
                              className="form-group undefined"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Input__FormGroup-v24ypt-4",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      "   h4{margin-bottom:10px;color:",
                                      [Function],
                                      ";}",
                                    ],
                                  },
                                  "displayName": "Input__FormGroup",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Input__FormGroup-v24ypt-4",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="form-group undefined c0"
                              >
                                <Input__H4Label
                                  htmlFor="comments"
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "Input__H4Label-v24ypt-5",
                                          "isStatic": false,
                                          "lastClassName": "c1",
                                          "rules": Array [
                                            "color:",
                                            [Function],
                                            ";",
                                          ],
                                        },
                                        "displayName": "Input__H4Label",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "Input__H4Label-v24ypt-5",
                                        "target": "h4",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    htmlFor="comments"
                                  >
                                    <h4
                                      className="c1"
                                      htmlFor="comments"
                                    >
                                      Comments
                                    </h4>
                                  </StyledComponent>
                                </Input__H4Label>
                                <MarkdownEditor
                                  initialValue="Hello world"
                                  onChange={[Function]}
                                  preview={false}
                                >
                                  <div>
                                    <MarkdownEditor__MarkdownOptionsList>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "MarkdownEditor__MarkdownOptionsList-sc-1gfee0s-1",
                                              "isStatic": true,
                                              "lastClassName": "c5",
                                              "rules": Array [
                                                "list-style-type:none;margin:0px 0px 10px 0px;padding:5px 0px;width:100%;li:first-child{margin-left:0;}li:last-child{float:right;margin-right:0;}",
                                                ".c6",
                                                ":last-child{bottom:1px;a{display:flex;align-items:center;}}",
                                              ],
                                            },
                                            "displayName": "MarkdownEditor__MarkdownOptionsList",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "MarkdownEditor__MarkdownOptionsList-sc-1gfee0s-1",
                                            "target": "ul",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <ul
                                          className="c5"
                                        >
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Bold text"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatBoldIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M13.5,15.5H10V12.5H13.5C14.33,12.5 15,13.17 15,14C15,14.83 14.33,15.5 13.5,15.5M10,6.5H13C13.83,6.5 14.5,7.17 14.5,8C14.5,8.83 13.83,9.5 13,9.5H10M15.6,10.79C16.57,10.11 17.25,9 17.25,8C17.25,5.74 15.5,4 13.25,4H7V18H14.04C16.14,18 17.75,16.3 17.75,14.21C17.75,12.69 16.89,11.39 15.6,10.79Z"
                                                            />
                                                          </svg>
                                                        </FormatBoldIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Bold text
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Italic text"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatItalicIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M10,4V7H12.21L8.79,15H6V18H14V15H11.79L15.21,7H18V4H10Z"
                                                            />
                                                          </svg>
                                                        </FormatItalicIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Italic text
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Underlined text"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatUnderlineIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M5,21H19V19H5V21M12,17C15.31,17 18,14.31 18,11V3H15.5V11C15.5,12.93 13.93,14.5 12,14.5C10.07,14.5 8.5,12.93 8.5,11V3H6V11C6,14.31 8.69,17 12,17Z"
                                                            />
                                                          </svg>
                                                        </FormatUnderlineIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Underlined text
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Crossed out text"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatStrikethroughIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M3,14H21V12H3M5,4V7H10V10H14V7H19V4M10,19H14V16H10V19Z"
                                                            />
                                                          </svg>
                                                        </FormatStrikethroughIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Crossed out text
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Code block"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <CodeTagsIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M14.6,16.6L19.2,12L14.6,7.4L16,6L22,12L16,18L14.6,16.6M9.4,16.6L4.8,12L9.4,7.4L8,6L2,12L8,18L9.4,16.6Z"
                                                            />
                                                          </svg>
                                                        </CodeTagsIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Code block
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="XL Header"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatHeader1Icon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M14,18V16H16V6.31L13.5,7.75V5.44L16,4H18V16H20V18H14Z"
                                                            />
                                                          </svg>
                                                        </FormatHeader1Icon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              XL Header
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="L Header"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatHeader2Icon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M21,18H15C13.9,18 13,17.1 13,16C13,15.47 13.2,15 13.54,14.64L18.41,9.41C18.78,9.05 19,8.55 19,8C19,6.9 18.1,6 17,6C15.9,6 15,6.9 15,8H13C13,5.79 14.79,4 17,4C19.21,4 21,5.79 21,8C21,9.1 20.55,10.1 19.83,10.83L15,16H21V18Z"
                                                            />
                                                          </svg>
                                                        </FormatHeader2Icon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              L Header
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="M Header"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatHeader3Icon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M3,4H5V10H9V4H11V18H9V12H5V18H3V4M15,4H19C20.1,4 21,4.9 21,6V16C21,17.1 20.1,18 19,18H15C13.9,18 13,17.1 13,16V15H15V16H19V12H15V10H19V6H15V7H13V6C13,4.9 13.9,4 15,4Z"
                                                            />
                                                          </svg>
                                                        </FormatHeader3Icon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              M Header
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Bulleted List"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatListBulletedIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M7,5H21V7H7V5M7,13V11H21V13H7M4,4.5C4.83,4.5 5.5,5.17 5.5,6C5.5,6.83 4.83,7.5 4,7.5C3.17,7.5 2.5,6.83 2.5,6C2.5,5.17 3.17,4.5 4,4.5M4,10.5C4.83,10.5 5.5,11.17 5.5,12C5.5,12.83 4.83,13.5 4,13.5C3.17,13.5 2.5,12.83 2.5,12C2.5,11.17 3.17,10.5 4,10.5M7,19V17H21V19H7M4,16.5C4.83,16.5 5.5,17.17 5.5,18C5.5,18.83 4.83,19.5 4,19.5C3.17,19.5 2.5,18.83 2.5,18C2.5,17.17 3.17,16.5 4,16.5Z"
                                                            />
                                                          </svg>
                                                        </FormatListBulletedIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Bulleted List
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Ordered List"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatListNumberedIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M7,13V11H21V13H7M7,19V17H21V19H7M7,7V5H21V7H7M3,8V5H2V4H4V8H3M2,17V16H5V20H2V19H4V18.5H3V17.5H4V17H2M4.25,10C4.66,10 5,10.34 5,10.75C5,10.95 4.92,11.14 4.79,11.27L3.12,13H5V14H2V13.08L4,11H2V10H4.25Z"
                                                            />
                                                          </svg>
                                                        </FormatListNumberedIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Ordered List
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Quote block"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <FormatQuoteCloseIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M14,17H17L19,13V7H13V13H16M6,17H9L11,13V7H5V13H8L6,17Z"
                                                            />
                                                          </svg>
                                                        </FormatQuoteCloseIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Quote block
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Hyperlink"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <LinkVariantIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z"
                                                            />
                                                          </svg>
                                                        </LinkVariantIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Hyperlink
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <li
                                                className="c6 c7"
                                                onClick={[Function]}
                                              >
                                                <Tooltip
                                                  className={null}
                                                  text="Embeded Image"
                                                >
                                                  <Tooltip__TooltipContainer
                                                    className={null}
                                                  >
                                                    <StyledComponent
                                                      className={null}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                            "isStatic": true,
                                                            "lastClassName": "c8",
                                                            "rules": Array [
                                                              "display:inline-block;position:relative;&:hover{",
                                                              ".c9",
                                                              "{display:block;}}",
                                                            ],
                                                          },
                                                          "displayName": "Tooltip__TooltipContainer",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Tooltip__TooltipContainer-sc-1yytjl7-1",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="c8"
                                                      >
                                                        <ImageOutlineIcon>
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={24}
                                                            viewBox="0 0 24 24"
                                                            width={24}
                                                          >
                                                            <path
                                                              d="M19,19H5V5H19M19,3H5C3.9,3 3,3.9 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.9 20.1,3 19,3M13.96,12.29L11.21,15.83L9.25,13.47L6.5,17H17.5L13.96,12.29Z"
                                                            />
                                                          </svg>
                                                        </ImageOutlineIcon>
                                                        <Tooltip__TooltipText
                                                          className="tooltip"
                                                        >
                                                          <StyledComponent
                                                            className="tooltip"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "c9",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c10",
                                                                  "rules": Array [
                                                                    "position:absolute;display:none;border-radius:3px;top:-50px;left:50%;width:auto;transform:translateX(-50%);padding:5px;background:",
                                                                    [Function],
                                                                    ";color:",
                                                                    [Function],
                                                                    ";text-align:center;font-size:12px;white-space:nowrap;box-shadow:0px 2px 7px ",
                                                                    [Function],
                                                                    ";&::after{content:' ';position:absolute;top:100%;left:50%;width:auto;transform:translateX(-50%);border:2px solid black;border-width:5px;border-color:",
                                                                    [Function],
                                                                    " transparent transparent transparent;}",
                                                                  ],
                                                                },
                                                                "displayName": "Tooltip__TooltipText",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "c9",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <p
                                                              className="tooltip c9 c10"
                                                            >
                                                              Embeded Image
                                                            </p>
                                                          </StyledComponent>
                                                        </Tooltip__TooltipText>
                                                      </div>
                                                    </StyledComponent>
                                                  </Tooltip__TooltipContainer>
                                                </Tooltip>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                          <MarkdownEditor__MarkdownOption>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "c6",
                                                    "isStatic": false,
                                                    "lastClassName": "c7",
                                                    "rules": Array [
                                                      "display:inline;margin-right:10px;position:relative;cursor:pointer;&:hover{svg{color:",
                                                      [Function],
                                                      " !important;}}",
                                                    ],
                                                  },
                                                  "displayName": "MarkdownEditor__MarkdownOption",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "c6",
                                                  "target": "li",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <li
                                                className="c6 c7"
                                              >
                                                <GhostButton
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <Button__StyledLink
                                                    disabled={false}
                                                    href="#"
                                                    onClick={[Function]}
                                                  >
                                                    <StyledComponent
                                                      disabled={false}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Button__StyledLink-gyjjyq-1",
                                                            "isStatic": false,
                                                            "lastClassName": "c11",
                                                            "rules": Array [
                                                              "text-decoration:none;color:",
                                                              [Function],
                                                              ";transition:color ease ",
                                                              [Function],
                                                              ";",
                                                              [Function],
                                                              " &:active,&:focus,&:visited{background:transparent;}",
                                                            ],
                                                          },
                                                          "displayName": "Button__StyledLink",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Button__StyledLink-gyjjyq-1",
                                                          "target": "a",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      href="#"
                                                      onClick={[Function]}
                                                    >
                                                      <a
                                                        className="c11"
                                                        disabled={false}
                                                        href="#"
                                                        onClick={[Function]}
                                                      >
                                                        <CardBulletedOutlineIcon
                                                          size={27}
                                                        >
                                                          <svg
                                                            className="mdi-icon "
                                                            fill="currentColor"
                                                            height={27}
                                                            viewBox="0 0 24 24"
                                                            width={27}
                                                          >
                                                            <path
                                                              d="M12,15H10V13H12V15M18,15H14V13H18V15M8,11H6V9H8V11M18,11H10V9H18V11M20,20H4C2.9,20 2,19.1 2,18V6C2,4.9 2.9,4 4,4H20C21.1,4 22,4.9 22,6V18C22,19.1 21.1,20 20,20M4,6V18H20V6H4Z"
                                                            />
                                                          </svg>
                                                        </CardBulletedOutlineIcon>
                                                        <span>
                                                           Preview
                                                        </span>
                                                      </a>
                                                    </StyledComponent>
                                                  </Button__StyledLink>
                                                </GhostButton>
                                              </li>
                                            </StyledComponent>
                                          </MarkdownEditor__MarkdownOption>
                                        </ul>
                                      </StyledComponent>
                                    </MarkdownEditor__MarkdownOptionsList>
                                    <MarkdownEditor__ModifiedTextArea
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      value="Hello world"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "MarkdownEditor__ModifiedTextArea-sc-1gfee0s-2",
                                              "isStatic": false,
                                              "lastClassName": "c12",
                                              "rules": Array [
                                                "padding:10px;border-radius:3px;outline:none;border:1px solid ",
                                                [Function],
                                                ";&:hover{border-color:",
                                                [Function],
                                                ";}&:focus{border:2px solid ",
                                                [Function],
                                                ";}",
                                              ],
                                            },
                                            "displayName": "MarkdownEditor__ModifiedTextArea",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "MarkdownEditor__ModifiedTextArea-sc-1gfee0s-2",
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={
                                          Object {
                                            "current": <textarea
                                              class="c12 c13"
                                              rows="1"
                                              style="height: 5px;"
                                            >
                                              Hello world
                                            </textarea>,
                                          }
                                        }
                                        onChange={[Function]}
                                        onKeyDown={[Function]}
                                        value="Hello world"
                                      >
                                        <ForwardRef
                                          className="c12"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          value="Hello world"
                                        >
                                          <TextArea
                                            className="c12"
                                            disabled={false}
                                            forwardedRef={
                                              Object {
                                                "current": <textarea
                                                  class="c12 c13"
                                                  rows="1"
                                                  style="height: 5px;"
                                                >
                                                  Hello world
                                                </textarea>,
                                              }
                                            }
                                            onChange={[Function]}
                                            onKeyDown={[Function]}
                                            rows={1}
                                            value="Hello world"
                                          >
                                            <TextArea__StyledTextArea
                                              className="c12"
                                              disabled={false}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              rows={1}
                                              value="Hello world"
                                            >
                                              <StyledComponent
                                                className="c12"
                                                disabled={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "TextArea__StyledTextArea-sc-1ncyxaw-0",
                                                      "isStatic": true,
                                                      "lastClassName": "c13",
                                                      "rules": Array [
                                                        "font-size:14px;resize:none;overflow:hidden;height:auto;width:100%;line-height:1.5rem;box-sizing:border-box;",
                                                      ],
                                                    },
                                                    "displayName": "TextArea__StyledTextArea",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "TextArea__StyledTextArea-sc-1ncyxaw-0",
                                                    "target": "textarea",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <textarea
                                                      class="c12 c13"
                                                      rows="1"
                                                      style="height: 5px;"
                                                    >
                                                      Hello world
                                                    </textarea>,
                                                  }
                                                }
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                rows={1}
                                                value="Hello world"
                                              >
                                                <textarea
                                                  className="c12 c13"
                                                  disabled={false}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  rows={1}
                                                  value="Hello world"
                                                />
                                              </StyledComponent>
                                            </TextArea__StyledTextArea>
                                          </TextArea>
                                        </ForwardRef>
                                      </StyledComponent>
                                    </MarkdownEditor__ModifiedTextArea>
                                  </div>
                                </MarkdownEditor>
                              </div>
                            </StyledComponent>
                          </Input__FormGroup>
                        </Label>
                        <TimeEntryModal__OptionButtons>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "TimeEntryModal__OptionButtons-neua1m-1",
                                  "isStatic": false,
                                  "lastClassName": "c14",
                                  "rules": Array [
                                    "margin-top:20px;padding-top:20px;border-top:2px solid ",
                                    [Function],
                                    ";display:flex;justify-content:space-between;button{padding:8px 15px;}",
                                  ],
                                },
                                "displayName": "TimeEntryModal__OptionButtons",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "TimeEntryModal__OptionButtons-neua1m-1",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c14"
                            >
                              <WithTheme(Button)
                                id="btn-update"
                                onClick={[Function]}
                                palette="success"
                              >
                                <Button
                                  block={false}
                                  disabled={false}
                                  id="btn-update"
                                  onClick={[Function]}
                                  palette="success"
                                  theme={
                                    Object {
                                      "bg": "#FFFFFF",
                                      "bgDark": "#F9F9F9",
                                      "green": "#6CCA51",
                                      "hoverText": "#FFFFFF",
                                      "main": "#FF7079",
                                      "mainDark": "#EF6069",
                                      "mainLight": "#FF7F87",
                                      "minorText": "#909090",
                                      "normalText": "#3F3844",
                                      "red": "#FF634D",
                                      "transitionTime": ".2s",
                                      "yellow": "#FFDA77",
                                    }
                                  }
                                  type="button"
                                >
                                  <Button__StyledButton
                                    block={false}
                                    disabled={false}
                                    id="btn-update"
                                    onClick={[Function]}
                                    palette={
                                      Object {
                                        "dark": undefined,
                                        "light": "#6CCA51",
                                      }
                                    }
                                    type="button"
                                  >
                                    <StyledComponent
                                      block={false}
                                      disabled={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button__StyledButton-gyjjyq-0",
                                            "isStatic": false,
                                            "lastClassName": "c15",
                                            "rules": Array [
                                              "border-radius:3px;font-weight:bold;font-size:14px;outline:none;text-align:center;",
                                              [Function],
                                              " ",
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button__StyledButton",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button__StyledButton-gyjjyq-0",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      id="btn-update"
                                      onClick={[Function]}
                                      palette={
                                        Object {
                                          "dark": undefined,
                                          "light": "#6CCA51",
                                        }
                                      }
                                      type="button"
                                    >
                                      <button
                                        className="c15"
                                        disabled={false}
                                        id="btn-update"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        Submit
                                      </button>
                                    </StyledComponent>
                                  </Button__StyledButton>
                                </Button>
                              </WithTheme(Button)>
                            </div>
                          </StyledComponent>
                        </TimeEntryModal__OptionButtons>
                        <CloseIcon
                          classNames={Object {}}
                          classes={
                            Object {
                              "closeButton": "styles_closeButton__20ID4",
                              "closeIcon": "styles_closeIcon__1QwbI",
                              "modal": "styles_modal__gNwvD",
                              "overlay": "styles_overlay__CLSq-",
                              "overlayCenter": "styles_overlayCenter__YHoO7",
                              "transitionEnter": "styles_transitionEnter__3j_-a",
                              "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                              "transitionExit": "styles_transitionExit__1KmEf",
                              "transitionExitActive": "styles_transitionExitActive__1nQXw",
                            }
                          }
                          closeIconSize={28}
                          closeIconSvgPath={
                            <path
                              d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
                            />
                          }
                          id={null}
                          onClickCloseIcon={[Function]}
                          styles={Object {}}
                        >
                          <button
                            className="styles_closeButton__20ID4"
                            id={null}
                            onClick={[Function]}
                          >
                            <svg
                              className="styles_closeIcon__1QwbI"
                              height={28}
                              viewBox="0 0 36 36"
                              width={28}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
                              />
                            </svg>
                          </button>
                        </CloseIcon>
                      </div>
                    </div>
                  </Transition>
                </CSSTransition>
              </Portal>
            </Portal>
          </Modal>
        </TimeEntryModal>
      </Connect(TimeEntryModal)>
    </WithTheme(Connect(TimeEntryModal))>
  </ThemeProvider>
</Provider>
`;
